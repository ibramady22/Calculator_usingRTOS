
CALC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000209a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  0000209a  0000212e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003b1  0080006e  0080006e  0000213c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000213c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000216c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000590  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006aa0  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000166d  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c29  00000000  00000000  0000a845  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011b4  00000000  00000000  0000e470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f3e  00000000  00000000  0000f624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006c2d  00000000  00000000  00011562  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000578  00000000  00000000  0001818f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 9a 02 	jmp	0x534	; 0x534 <__vector_7>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	67 0e       	add	r6, r23
      56:	67 0e       	add	r6, r23
      58:	96 0e       	add	r9, r22
      5a:	9b 0e       	add	r9, r27
      5c:	b1 0e       	add	r11, r17
      5e:	67 0e       	add	r6, r23
      60:	67 0e       	add	r6, r23
      62:	96 0e       	add	r9, r22
      64:	9b 0e       	add	r9, r27

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	10 e0       	ldi	r17, 0x00	; 0
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	ea e9       	ldi	r30, 0x9A	; 154
      7a:	f0 e2       	ldi	r31, 0x20	; 32
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	ae 36       	cpi	r26, 0x6E	; 110
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	24 e0       	ldi	r18, 0x04	; 4
      8a:	ae e6       	ldi	r26, 0x6E	; 110
      8c:	b0 e0       	ldi	r27, 0x00	; 0
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	af 31       	cpi	r26, 0x1F	; 31
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 08 10 	call	0x2010	; 0x2010 <main>
      9c:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <DIO_WritePin>:
}


void DIO_WritePin(DIO_Pin_type pin,DIO_PinVoltage_type volt  ) //werite ..... always output
{
	DIO_Port_type port=pin/8;
      a4:	98 2f       	mov	r25, r24
      a6:	96 95       	lsr	r25
      a8:	96 95       	lsr	r25
      aa:	96 95       	lsr	r25
	u8 Pin_num=pin%8;
      ac:	87 70       	andi	r24, 0x07	; 7
	if(volt==HIGH)
      ae:	61 30       	cpi	r22, 0x01	; 1
      b0:	e1 f5       	brne	.+120    	; 0x12a <DIO_WritePin+0x86>
	{
		switch(port)
      b2:	91 30       	cpi	r25, 0x01	; 1
      b4:	99 f0       	breq	.+38     	; 0xdc <DIO_WritePin+0x38>
      b6:	28 f0       	brcs	.+10     	; 0xc2 <DIO_WritePin+0x1e>
      b8:	92 30       	cpi	r25, 0x02	; 2
      ba:	e9 f0       	breq	.+58     	; 0xf6 <DIO_WritePin+0x52>
      bc:	93 30       	cpi	r25, 0x03	; 3
      be:	41 f1       	breq	.+80     	; 0x110 <DIO_WritePin+0x6c>
      c0:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,Pin_num);
      c2:	4b b3       	in	r20, 0x1b	; 27
      c4:	21 e0       	ldi	r18, 0x01	; 1
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	b9 01       	movw	r22, r18
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_WritePin+0x2c>
      cc:	66 0f       	add	r22, r22
      ce:	77 1f       	adc	r23, r23
      d0:	8a 95       	dec	r24
      d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_WritePin+0x28>
      d4:	cb 01       	movw	r24, r22
      d6:	84 2b       	or	r24, r20
      d8:	8b bb       	out	0x1b, r24	; 27
			break;
      da:	08 95       	ret
			case PB:
			SET_BIT(PORTB,Pin_num);
      dc:	48 b3       	in	r20, 0x18	; 24
      de:	21 e0       	ldi	r18, 0x01	; 1
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	b9 01       	movw	r22, r18
      e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WritePin+0x46>
      e6:	66 0f       	add	r22, r22
      e8:	77 1f       	adc	r23, r23
      ea:	8a 95       	dec	r24
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WritePin+0x42>
      ee:	cb 01       	movw	r24, r22
      f0:	84 2b       	or	r24, r20
      f2:	88 bb       	out	0x18, r24	; 24
			break;
      f4:	08 95       	ret
			case PC:
			SET_BIT(PORTC,Pin_num);
      f6:	45 b3       	in	r20, 0x15	; 21
      f8:	21 e0       	ldi	r18, 0x01	; 1
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	b9 01       	movw	r22, r18
      fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_WritePin+0x60>
     100:	66 0f       	add	r22, r22
     102:	77 1f       	adc	r23, r23
     104:	8a 95       	dec	r24
     106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_WritePin+0x5c>
     108:	cb 01       	movw	r24, r22
     10a:	84 2b       	or	r24, r20
     10c:	85 bb       	out	0x15, r24	; 21
			break;
     10e:	08 95       	ret
			case PD:
			SET_BIT(PORTD,Pin_num);
     110:	42 b3       	in	r20, 0x12	; 18
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	b9 01       	movw	r22, r18
     118:	02 c0       	rjmp	.+4      	; 0x11e <DIO_WritePin+0x7a>
     11a:	66 0f       	add	r22, r22
     11c:	77 1f       	adc	r23, r23
     11e:	8a 95       	dec	r24
     120:	e2 f7       	brpl	.-8      	; 0x11a <DIO_WritePin+0x76>
     122:	cb 01       	movw	r24, r22
     124:	84 2b       	or	r24, r20
     126:	82 bb       	out	0x12, r24	; 18
			break;
     128:	08 95       	ret
		}
	}
	else if (volt==LOW)
     12a:	61 11       	cpse	r22, r1
     12c:	3f c0       	rjmp	.+126    	; 0x1ac <DIO_WritePin+0x108>
	{
		switch(port)
     12e:	91 30       	cpi	r25, 0x01	; 1
     130:	a1 f0       	breq	.+40     	; 0x15a <DIO_WritePin+0xb6>
     132:	28 f0       	brcs	.+10     	; 0x13e <DIO_WritePin+0x9a>
     134:	92 30       	cpi	r25, 0x02	; 2
     136:	f9 f0       	breq	.+62     	; 0x176 <DIO_WritePin+0xd2>
     138:	93 30       	cpi	r25, 0x03	; 3
     13a:	59 f1       	breq	.+86     	; 0x192 <DIO_WritePin+0xee>
     13c:	08 95       	ret
		{
			case PA:
			CLR_BIT(PORTA,Pin_num);
     13e:	4b b3       	in	r20, 0x1b	; 27
     140:	21 e0       	ldi	r18, 0x01	; 1
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	b9 01       	movw	r22, r18
     146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_WritePin+0xa8>
     148:	66 0f       	add	r22, r22
     14a:	77 1f       	adc	r23, r23
     14c:	8a 95       	dec	r24
     14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_WritePin+0xa4>
     150:	cb 01       	movw	r24, r22
     152:	80 95       	com	r24
     154:	84 23       	and	r24, r20
     156:	8b bb       	out	0x1b, r24	; 27
			break;
     158:	08 95       	ret
			case PB:
			CLR_BIT(PORTB,Pin_num);
     15a:	48 b3       	in	r20, 0x18	; 24
     15c:	21 e0       	ldi	r18, 0x01	; 1
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	b9 01       	movw	r22, r18
     162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_WritePin+0xc4>
     164:	66 0f       	add	r22, r22
     166:	77 1f       	adc	r23, r23
     168:	8a 95       	dec	r24
     16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_WritePin+0xc0>
     16c:	cb 01       	movw	r24, r22
     16e:	80 95       	com	r24
     170:	84 23       	and	r24, r20
     172:	88 bb       	out	0x18, r24	; 24
			break;
     174:	08 95       	ret
			case PC:
			CLR_BIT(PORTC,Pin_num);
     176:	45 b3       	in	r20, 0x15	; 21
     178:	21 e0       	ldi	r18, 0x01	; 1
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	b9 01       	movw	r22, r18
     17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_WritePin+0xe0>
     180:	66 0f       	add	r22, r22
     182:	77 1f       	adc	r23, r23
     184:	8a 95       	dec	r24
     186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_WritePin+0xdc>
     188:	cb 01       	movw	r24, r22
     18a:	80 95       	com	r24
     18c:	84 23       	and	r24, r20
     18e:	85 bb       	out	0x15, r24	; 21
			break;
     190:	08 95       	ret
			case PD:
			CLR_BIT(PORTD,Pin_num);
     192:	42 b3       	in	r20, 0x12	; 18
     194:	21 e0       	ldi	r18, 0x01	; 1
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	b9 01       	movw	r22, r18
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_WritePin+0xfc>
     19c:	66 0f       	add	r22, r22
     19e:	77 1f       	adc	r23, r23
     1a0:	8a 95       	dec	r24
     1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_WritePin+0xf8>
     1a4:	cb 01       	movw	r24, r22
     1a6:	80 95       	com	r24
     1a8:	84 23       	and	r24, r20
     1aa:	82 bb       	out	0x12, r24	; 18
     1ac:	08 95       	ret

000001ae <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     1ae:	fc 01       	movw	r30, r24
     1b0:	03 96       	adiw	r24, 0x03	; 3
     1b2:	92 83       	std	Z+2, r25	; 0x02
     1b4:	81 83       	std	Z+1, r24	; 0x01
     1b6:	2f ef       	ldi	r18, 0xFF	; 255
     1b8:	3f ef       	ldi	r19, 0xFF	; 255
     1ba:	34 83       	std	Z+4, r19	; 0x04
     1bc:	23 83       	std	Z+3, r18	; 0x03
     1be:	96 83       	std	Z+6, r25	; 0x06
     1c0:	85 83       	std	Z+5, r24	; 0x05
     1c2:	90 87       	std	Z+8, r25	; 0x08
     1c4:	87 83       	std	Z+7, r24	; 0x07
     1c6:	10 82       	st	Z, r1
     1c8:	08 95       	ret

000001ca <vListInitialiseItem>:
     1ca:	fc 01       	movw	r30, r24
     1cc:	11 86       	std	Z+9, r1	; 0x09
     1ce:	10 86       	std	Z+8, r1	; 0x08
     1d0:	08 95       	ret

000001d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     1d2:	cf 93       	push	r28
     1d4:	df 93       	push	r29
     1d6:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     1d8:	48 81       	ld	r20, Y
     1da:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     1dc:	4f 3f       	cpi	r20, 0xFF	; 255
     1de:	2f ef       	ldi	r18, 0xFF	; 255
     1e0:	52 07       	cpc	r21, r18
     1e2:	21 f4       	brne	.+8      	; 0x1ec <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     1e4:	fc 01       	movw	r30, r24
     1e6:	a7 81       	ldd	r26, Z+7	; 0x07
     1e8:	b0 85       	ldd	r27, Z+8	; 0x08
     1ea:	0d c0       	rjmp	.+26     	; 0x206 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     1ec:	dc 01       	movw	r26, r24
     1ee:	13 96       	adiw	r26, 0x03	; 3
     1f0:	01 c0       	rjmp	.+2      	; 0x1f4 <vListInsert+0x22>
     1f2:	df 01       	movw	r26, r30
     1f4:	12 96       	adiw	r26, 0x02	; 2
     1f6:	ed 91       	ld	r30, X+
     1f8:	fc 91       	ld	r31, X
     1fa:	13 97       	sbiw	r26, 0x03	; 3
     1fc:	20 81       	ld	r18, Z
     1fe:	31 81       	ldd	r19, Z+1	; 0x01
     200:	42 17       	cp	r20, r18
     202:	53 07       	cpc	r21, r19
     204:	b0 f7       	brcc	.-20     	; 0x1f2 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     206:	12 96       	adiw	r26, 0x02	; 2
     208:	ed 91       	ld	r30, X+
     20a:	fc 91       	ld	r31, X
     20c:	13 97       	sbiw	r26, 0x03	; 3
     20e:	fb 83       	std	Y+3, r31	; 0x03
     210:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     212:	d5 83       	std	Z+5, r29	; 0x05
     214:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     216:	bd 83       	std	Y+5, r27	; 0x05
     218:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     21a:	13 96       	adiw	r26, 0x03	; 3
     21c:	dc 93       	st	X, r29
     21e:	ce 93       	st	-X, r28
     220:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     222:	99 87       	std	Y+9, r25	; 0x09
     224:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     226:	fc 01       	movw	r30, r24
     228:	20 81       	ld	r18, Z
     22a:	2f 5f       	subi	r18, 0xFF	; 255
     22c:	20 83       	st	Z, r18
}
     22e:	df 91       	pop	r29
     230:	cf 91       	pop	r28
     232:	08 95       	ret

00000234 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     23a:	a0 85       	ldd	r26, Z+8	; 0x08
     23c:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     23e:	c2 81       	ldd	r28, Z+2	; 0x02
     240:	d3 81       	ldd	r29, Z+3	; 0x03
     242:	84 81       	ldd	r24, Z+4	; 0x04
     244:	95 81       	ldd	r25, Z+5	; 0x05
     246:	9d 83       	std	Y+5, r25	; 0x05
     248:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     24a:	c4 81       	ldd	r28, Z+4	; 0x04
     24c:	d5 81       	ldd	r29, Z+5	; 0x05
     24e:	82 81       	ldd	r24, Z+2	; 0x02
     250:	93 81       	ldd	r25, Z+3	; 0x03
     252:	9b 83       	std	Y+3, r25	; 0x03
     254:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     256:	11 96       	adiw	r26, 0x01	; 1
     258:	8d 91       	ld	r24, X+
     25a:	9c 91       	ld	r25, X
     25c:	12 97       	sbiw	r26, 0x02	; 2
     25e:	e8 17       	cp	r30, r24
     260:	f9 07       	cpc	r31, r25
     262:	31 f4       	brne	.+12     	; 0x270 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     264:	84 81       	ldd	r24, Z+4	; 0x04
     266:	95 81       	ldd	r25, Z+5	; 0x05
     268:	12 96       	adiw	r26, 0x02	; 2
     26a:	9c 93       	st	X, r25
     26c:	8e 93       	st	-X, r24
     26e:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     270:	11 86       	std	Z+9, r1	; 0x09
     272:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     274:	8c 91       	ld	r24, X
     276:	81 50       	subi	r24, 0x01	; 1
     278:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     27a:	8c 91       	ld	r24, X
}
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     282:	1b bc       	out	0x2b, r1	; 43
     284:	89 ef       	ldi	r24, 0xF9	; 249
     286:	8a bd       	out	0x2a, r24	; 42
     288:	8b e0       	ldi	r24, 0x0B	; 11
     28a:	8e bd       	out	0x2e, r24	; 46
     28c:	89 b7       	in	r24, 0x39	; 57
     28e:	80 61       	ori	r24, 0x10	; 16
     290:	89 bf       	out	0x39, r24	; 57
     292:	08 95       	ret

00000294 <pxPortInitialiseStack>:
     294:	31 e1       	ldi	r19, 0x11	; 17
     296:	fc 01       	movw	r30, r24
     298:	30 83       	st	Z, r19
     29a:	31 97       	sbiw	r30, 0x01	; 1
     29c:	22 e2       	ldi	r18, 0x22	; 34
     29e:	20 83       	st	Z, r18
     2a0:	31 97       	sbiw	r30, 0x01	; 1
     2a2:	a3 e3       	ldi	r26, 0x33	; 51
     2a4:	a0 83       	st	Z, r26
     2a6:	31 97       	sbiw	r30, 0x01	; 1
     2a8:	60 83       	st	Z, r22
     2aa:	31 97       	sbiw	r30, 0x01	; 1
     2ac:	70 83       	st	Z, r23
     2ae:	31 97       	sbiw	r30, 0x01	; 1
     2b0:	10 82       	st	Z, r1
     2b2:	31 97       	sbiw	r30, 0x01	; 1
     2b4:	60 e8       	ldi	r22, 0x80	; 128
     2b6:	60 83       	st	Z, r22
     2b8:	31 97       	sbiw	r30, 0x01	; 1
     2ba:	10 82       	st	Z, r1
     2bc:	31 97       	sbiw	r30, 0x01	; 1
     2be:	62 e0       	ldi	r22, 0x02	; 2
     2c0:	60 83       	st	Z, r22
     2c2:	31 97       	sbiw	r30, 0x01	; 1
     2c4:	63 e0       	ldi	r22, 0x03	; 3
     2c6:	60 83       	st	Z, r22
     2c8:	31 97       	sbiw	r30, 0x01	; 1
     2ca:	64 e0       	ldi	r22, 0x04	; 4
     2cc:	60 83       	st	Z, r22
     2ce:	31 97       	sbiw	r30, 0x01	; 1
     2d0:	65 e0       	ldi	r22, 0x05	; 5
     2d2:	60 83       	st	Z, r22
     2d4:	31 97       	sbiw	r30, 0x01	; 1
     2d6:	66 e0       	ldi	r22, 0x06	; 6
     2d8:	60 83       	st	Z, r22
     2da:	31 97       	sbiw	r30, 0x01	; 1
     2dc:	67 e0       	ldi	r22, 0x07	; 7
     2de:	60 83       	st	Z, r22
     2e0:	31 97       	sbiw	r30, 0x01	; 1
     2e2:	68 e0       	ldi	r22, 0x08	; 8
     2e4:	60 83       	st	Z, r22
     2e6:	31 97       	sbiw	r30, 0x01	; 1
     2e8:	69 e0       	ldi	r22, 0x09	; 9
     2ea:	60 83       	st	Z, r22
     2ec:	31 97       	sbiw	r30, 0x01	; 1
     2ee:	60 e1       	ldi	r22, 0x10	; 16
     2f0:	60 83       	st	Z, r22
     2f2:	31 97       	sbiw	r30, 0x01	; 1
     2f4:	30 83       	st	Z, r19
     2f6:	31 97       	sbiw	r30, 0x01	; 1
     2f8:	32 e1       	ldi	r19, 0x12	; 18
     2fa:	30 83       	st	Z, r19
     2fc:	31 97       	sbiw	r30, 0x01	; 1
     2fe:	33 e1       	ldi	r19, 0x13	; 19
     300:	30 83       	st	Z, r19
     302:	31 97       	sbiw	r30, 0x01	; 1
     304:	34 e1       	ldi	r19, 0x14	; 20
     306:	30 83       	st	Z, r19
     308:	31 97       	sbiw	r30, 0x01	; 1
     30a:	35 e1       	ldi	r19, 0x15	; 21
     30c:	30 83       	st	Z, r19
     30e:	31 97       	sbiw	r30, 0x01	; 1
     310:	36 e1       	ldi	r19, 0x16	; 22
     312:	30 83       	st	Z, r19
     314:	31 97       	sbiw	r30, 0x01	; 1
     316:	37 e1       	ldi	r19, 0x17	; 23
     318:	30 83       	st	Z, r19
     31a:	31 97       	sbiw	r30, 0x01	; 1
     31c:	38 e1       	ldi	r19, 0x18	; 24
     31e:	30 83       	st	Z, r19
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	39 e1       	ldi	r19, 0x19	; 25
     324:	30 83       	st	Z, r19
     326:	31 97       	sbiw	r30, 0x01	; 1
     328:	30 e2       	ldi	r19, 0x20	; 32
     32a:	30 83       	st	Z, r19
     32c:	31 97       	sbiw	r30, 0x01	; 1
     32e:	31 e2       	ldi	r19, 0x21	; 33
     330:	30 83       	st	Z, r19
     332:	31 97       	sbiw	r30, 0x01	; 1
     334:	20 83       	st	Z, r18
     336:	31 97       	sbiw	r30, 0x01	; 1
     338:	23 e2       	ldi	r18, 0x23	; 35
     33a:	20 83       	st	Z, r18
     33c:	31 97       	sbiw	r30, 0x01	; 1
     33e:	40 83       	st	Z, r20
     340:	31 97       	sbiw	r30, 0x01	; 1
     342:	50 83       	st	Z, r21
     344:	31 97       	sbiw	r30, 0x01	; 1
     346:	26 e2       	ldi	r18, 0x26	; 38
     348:	20 83       	st	Z, r18
     34a:	31 97       	sbiw	r30, 0x01	; 1
     34c:	27 e2       	ldi	r18, 0x27	; 39
     34e:	20 83       	st	Z, r18
     350:	31 97       	sbiw	r30, 0x01	; 1
     352:	28 e2       	ldi	r18, 0x28	; 40
     354:	20 83       	st	Z, r18
     356:	31 97       	sbiw	r30, 0x01	; 1
     358:	29 e2       	ldi	r18, 0x29	; 41
     35a:	20 83       	st	Z, r18
     35c:	31 97       	sbiw	r30, 0x01	; 1
     35e:	20 e3       	ldi	r18, 0x30	; 48
     360:	20 83       	st	Z, r18
     362:	31 97       	sbiw	r30, 0x01	; 1
     364:	21 e3       	ldi	r18, 0x31	; 49
     366:	20 83       	st	Z, r18
     368:	86 97       	sbiw	r24, 0x26	; 38
     36a:	08 95       	ret

0000036c <xPortStartScheduler>:
     36c:	0e 94 41 01 	call	0x282	; 0x282 <prvSetupTimerInterrupt>
     370:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <pxCurrentTCB>
     374:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
     378:	cd 91       	ld	r28, X+
     37a:	cd bf       	out	0x3d, r28	; 61
     37c:	dd 91       	ld	r29, X+
     37e:	de bf       	out	0x3e, r29	; 62
     380:	ff 91       	pop	r31
     382:	ef 91       	pop	r30
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	bf 91       	pop	r27
     38a:	af 91       	pop	r26
     38c:	9f 91       	pop	r25
     38e:	8f 91       	pop	r24
     390:	7f 91       	pop	r23
     392:	6f 91       	pop	r22
     394:	5f 91       	pop	r21
     396:	4f 91       	pop	r20
     398:	3f 91       	pop	r19
     39a:	2f 91       	pop	r18
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	cf 90       	pop	r12
     3a8:	bf 90       	pop	r11
     3aa:	af 90       	pop	r10
     3ac:	9f 90       	pop	r9
     3ae:	8f 90       	pop	r8
     3b0:	7f 90       	pop	r7
     3b2:	6f 90       	pop	r6
     3b4:	5f 90       	pop	r5
     3b6:	4f 90       	pop	r4
     3b8:	3f 90       	pop	r3
     3ba:	2f 90       	pop	r2
     3bc:	1f 90       	pop	r1
     3be:	0f 90       	pop	r0
     3c0:	0f be       	out	0x3f, r0	; 63
     3c2:	0f 90       	pop	r0
     3c4:	08 95       	ret
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	08 95       	ret

000003ca <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     3ca:	0f 92       	push	r0
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	0f 92       	push	r0
     3d2:	1f 92       	push	r1
     3d4:	11 24       	eor	r1, r1
     3d6:	2f 92       	push	r2
     3d8:	3f 92       	push	r3
     3da:	4f 92       	push	r4
     3dc:	5f 92       	push	r5
     3de:	6f 92       	push	r6
     3e0:	7f 92       	push	r7
     3e2:	8f 92       	push	r8
     3e4:	9f 92       	push	r9
     3e6:	af 92       	push	r10
     3e8:	bf 92       	push	r11
     3ea:	cf 92       	push	r12
     3ec:	df 92       	push	r13
     3ee:	ef 92       	push	r14
     3f0:	ff 92       	push	r15
     3f2:	0f 93       	push	r16
     3f4:	1f 93       	push	r17
     3f6:	2f 93       	push	r18
     3f8:	3f 93       	push	r19
     3fa:	4f 93       	push	r20
     3fc:	5f 93       	push	r21
     3fe:	6f 93       	push	r22
     400:	7f 93       	push	r23
     402:	8f 93       	push	r24
     404:	9f 93       	push	r25
     406:	af 93       	push	r26
     408:	bf 93       	push	r27
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	ef 93       	push	r30
     410:	ff 93       	push	r31
     412:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <pxCurrentTCB>
     416:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
     41a:	0d b6       	in	r0, 0x3d	; 61
     41c:	0d 92       	st	X+, r0
     41e:	0e b6       	in	r0, 0x3e	; 62
     420:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     422:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     426:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <pxCurrentTCB>
     42a:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
     42e:	cd 91       	ld	r28, X+
     430:	cd bf       	out	0x3d, r28	; 61
     432:	dd 91       	ld	r29, X+
     434:	de bf       	out	0x3e, r29	; 62
     436:	ff 91       	pop	r31
     438:	ef 91       	pop	r30
     43a:	df 91       	pop	r29
     43c:	cf 91       	pop	r28
     43e:	bf 91       	pop	r27
     440:	af 91       	pop	r26
     442:	9f 91       	pop	r25
     444:	8f 91       	pop	r24
     446:	7f 91       	pop	r23
     448:	6f 91       	pop	r22
     44a:	5f 91       	pop	r21
     44c:	4f 91       	pop	r20
     44e:	3f 91       	pop	r19
     450:	2f 91       	pop	r18
     452:	1f 91       	pop	r17
     454:	0f 91       	pop	r16
     456:	ff 90       	pop	r15
     458:	ef 90       	pop	r14
     45a:	df 90       	pop	r13
     45c:	cf 90       	pop	r12
     45e:	bf 90       	pop	r11
     460:	af 90       	pop	r10
     462:	9f 90       	pop	r9
     464:	8f 90       	pop	r8
     466:	7f 90       	pop	r7
     468:	6f 90       	pop	r6
     46a:	5f 90       	pop	r5
     46c:	4f 90       	pop	r4
     46e:	3f 90       	pop	r3
     470:	2f 90       	pop	r2
     472:	1f 90       	pop	r1
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0

	asm volatile ( "ret" );
     47a:	08 95       	ret

0000047c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     47c:	0f 92       	push	r0
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	0f 92       	push	r0
     484:	1f 92       	push	r1
     486:	11 24       	eor	r1, r1
     488:	2f 92       	push	r2
     48a:	3f 92       	push	r3
     48c:	4f 92       	push	r4
     48e:	5f 92       	push	r5
     490:	6f 92       	push	r6
     492:	7f 92       	push	r7
     494:	8f 92       	push	r8
     496:	9f 92       	push	r9
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	0f 93       	push	r16
     4a6:	1f 93       	push	r17
     4a8:	2f 93       	push	r18
     4aa:	3f 93       	push	r19
     4ac:	4f 93       	push	r20
     4ae:	5f 93       	push	r21
     4b0:	6f 93       	push	r22
     4b2:	7f 93       	push	r23
     4b4:	8f 93       	push	r24
     4b6:	9f 93       	push	r25
     4b8:	af 93       	push	r26
     4ba:	bf 93       	push	r27
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	ef 93       	push	r30
     4c2:	ff 93       	push	r31
     4c4:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <pxCurrentTCB>
     4c8:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
     4cc:	0d b6       	in	r0, 0x3d	; 61
     4ce:	0d 92       	st	X+, r0
     4d0:	0e b6       	in	r0, 0x3e	; 62
     4d2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     4d4:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xTaskIncrementTick>
     4d8:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     4da:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     4de:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <pxCurrentTCB>
     4e2:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
     4e6:	cd 91       	ld	r28, X+
     4e8:	cd bf       	out	0x3d, r28	; 61
     4ea:	dd 91       	ld	r29, X+
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	ff 91       	pop	r31
     4f0:	ef 91       	pop	r30
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	bf 91       	pop	r27
     4f8:	af 91       	pop	r26
     4fa:	9f 91       	pop	r25
     4fc:	8f 91       	pop	r24
     4fe:	7f 91       	pop	r23
     500:	6f 91       	pop	r22
     502:	5f 91       	pop	r21
     504:	4f 91       	pop	r20
     506:	3f 91       	pop	r19
     508:	2f 91       	pop	r18
     50a:	1f 91       	pop	r17
     50c:	0f 91       	pop	r16
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
     518:	af 90       	pop	r10
     51a:	9f 90       	pop	r9
     51c:	8f 90       	pop	r8
     51e:	7f 90       	pop	r7
     520:	6f 90       	pop	r6
     522:	5f 90       	pop	r5
     524:	4f 90       	pop	r4
     526:	3f 90       	pop	r3
     528:	2f 90       	pop	r2
     52a:	1f 90       	pop	r1
     52c:	0f 90       	pop	r0
     52e:	0f be       	out	0x3f, r0	; 63
     530:	0f 90       	pop	r0

	asm volatile ( "ret" );
     532:	08 95       	ret

00000534 <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     534:	0e 94 3e 02 	call	0x47c	; 0x47c <vPortYieldFromTick>
		asm volatile ( "reti" );
     538:	18 95       	reti

0000053a <prvHeapInit>:

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     53a:	e8 e7       	ldi	r30, 0x78	; 120
     53c:	f0 e0       	ldi	r31, 0x00	; 0
     53e:	ac e7       	ldi	r26, 0x7C	; 124
     540:	b0 e0       	ldi	r27, 0x00	; 0
     542:	b1 83       	std	Z+1, r27	; 0x01
     544:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     546:	13 82       	std	Z+3, r1	; 0x03
     548:	12 82       	std	Z+2, r1	; 0x02

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
     54a:	e8 e9       	ldi	r30, 0x98	; 152
     54c:	f3 e0       	ldi	r31, 0x03	; 3
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( BlockLink_t * ) uxAddress;
     54e:	f0 93 77 00 	sts	0x0077, r31	; 0x800077 <pxEnd+0x1>
     552:	e0 93 76 00 	sts	0x0076, r30	; 0x800076 <pxEnd>
    pxEnd->xBlockSize = 0;
     556:	13 82       	std	Z+3, r1	; 0x03
     558:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     55a:	11 82       	std	Z+1, r1	; 0x01
     55c:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
     55e:	8c e1       	ldi	r24, 0x1C	; 28
     560:	93 e0       	ldi	r25, 0x03	; 3
     562:	13 96       	adiw	r26, 0x03	; 3
     564:	9c 93       	st	X, r25
     566:	8e 93       	st	-X, r24
     568:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     56a:	ed 93       	st	X+, r30
     56c:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     56e:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xMinimumEverFreeBytesRemaining+0x1>
     572:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     576:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <xFreeBytesRemaining+0x1>
     57a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <xFreeBytesRemaining>
     57e:	08 95       	ret

00000580 <prvInsertBlockIntoFreeList>:
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	ec 01       	movw	r28, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     586:	a8 e7       	ldi	r26, 0x78	; 120
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	01 c0       	rjmp	.+2      	; 0x58e <prvInsertBlockIntoFreeList+0xe>
     58c:	df 01       	movw	r26, r30
     58e:	ed 91       	ld	r30, X+
     590:	fc 91       	ld	r31, X
     592:	11 97       	sbiw	r26, 0x01	; 1
     594:	ec 17       	cp	r30, r28
     596:	fd 07       	cpc	r31, r29
     598:	c8 f3       	brcs	.-14     	; 0x58c <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     59a:	12 96       	adiw	r26, 0x02	; 2
     59c:	8d 91       	ld	r24, X+
     59e:	9c 91       	ld	r25, X
     5a0:	13 97       	sbiw	r26, 0x03	; 3
     5a2:	9d 01       	movw	r18, r26
     5a4:	28 0f       	add	r18, r24
     5a6:	39 1f       	adc	r19, r25
     5a8:	c2 17       	cp	r28, r18
     5aa:	d3 07       	cpc	r29, r19
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <prvInsertBlockIntoFreeList+0x40>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     5ae:	2a 81       	ldd	r18, Y+2	; 0x02
     5b0:	3b 81       	ldd	r19, Y+3	; 0x03
     5b2:	82 0f       	add	r24, r18
     5b4:	93 1f       	adc	r25, r19
     5b6:	13 96       	adiw	r26, 0x03	; 3
     5b8:	9c 93       	st	X, r25
     5ba:	8e 93       	st	-X, r24
     5bc:	12 97       	sbiw	r26, 0x02	; 2
        pxBlockToInsert = pxIterator;
     5be:	ed 01       	movw	r28, r26

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     5c0:	8a 81       	ldd	r24, Y+2	; 0x02
     5c2:	9b 81       	ldd	r25, Y+3	; 0x03
     5c4:	9e 01       	movw	r18, r28
     5c6:	28 0f       	add	r18, r24
     5c8:	39 1f       	adc	r19, r25
     5ca:	e2 17       	cp	r30, r18
     5cc:	f3 07       	cpc	r31, r19
     5ce:	c1 f4       	brne	.+48     	; 0x600 <prvInsertBlockIntoFreeList+0x80>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     5d0:	20 91 76 00 	lds	r18, 0x0076	; 0x800076 <pxEnd>
     5d4:	30 91 77 00 	lds	r19, 0x0077	; 0x800077 <pxEnd+0x1>
     5d8:	e2 17       	cp	r30, r18
     5da:	f3 07       	cpc	r31, r19
     5dc:	71 f0       	breq	.+28     	; 0x5fa <prvInsertBlockIntoFreeList+0x7a>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     5de:	22 81       	ldd	r18, Z+2	; 0x02
     5e0:	33 81       	ldd	r19, Z+3	; 0x03
     5e2:	82 0f       	add	r24, r18
     5e4:	93 1f       	adc	r25, r19
     5e6:	9b 83       	std	Y+3, r25	; 0x03
     5e8:	8a 83       	std	Y+2, r24	; 0x02
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     5ea:	ed 91       	ld	r30, X+
     5ec:	fc 91       	ld	r31, X
     5ee:	11 97       	sbiw	r26, 0x01	; 1
     5f0:	80 81       	ld	r24, Z
     5f2:	91 81       	ldd	r25, Z+1	; 0x01
     5f4:	99 83       	std	Y+1, r25	; 0x01
     5f6:	88 83       	st	Y, r24
     5f8:	05 c0       	rjmp	.+10     	; 0x604 <prvInsertBlockIntoFreeList+0x84>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     5fa:	39 83       	std	Y+1, r19	; 0x01
     5fc:	28 83       	st	Y, r18
     5fe:	02 c0       	rjmp	.+4      	; 0x604 <prvInsertBlockIntoFreeList+0x84>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     600:	f9 83       	std	Y+1, r31	; 0x01
     602:	e8 83       	st	Y, r30

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     604:	ca 17       	cp	r28, r26
     606:	db 07       	cpc	r29, r27
     608:	11 f0       	breq	.+4      	; 0x60e <prvInsertBlockIntoFreeList+0x8e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     60a:	cd 93       	st	X+, r28
     60c:	dc 93       	st	X, r29
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     60e:	df 91       	pop	r29
     610:	cf 91       	pop	r28
     612:	08 95       	ret

00000614 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     614:	ef 92       	push	r14
     616:	ff 92       	push	r15
     618:	0f 93       	push	r16
     61a:	1f 93       	push	r17
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	8c 01       	movw	r16, r24
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
     622:	0e 94 51 09 	call	0x12a2	; 0x12a2 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     626:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <pxEnd>
     62a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <pxEnd+0x1>
     62e:	89 2b       	or	r24, r25
     630:	11 f4       	brne	.+4      	; 0x636 <pvPortMalloc+0x22>
        {
            prvHeapInit();
     632:	0e 94 9d 02 	call	0x53a	; 0x53a <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
     636:	01 15       	cp	r16, r1
     638:	11 05       	cpc	r17, r1
     63a:	49 f0       	breq	.+18     	; 0x64e <pvPortMalloc+0x3a>
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
     63c:	0b 3f       	cpi	r16, 0xFB	; 251
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	18 07       	cpc	r17, r24
     642:	18 f4       	brcc	.+6      	; 0x64a <pvPortMalloc+0x36>
            {
                xWantedSize += xAdditionalRequiredSize;
     644:	0b 5f       	subi	r16, 0xFB	; 251
     646:	1f 4f       	sbci	r17, 0xFF	; 255
     648:	02 c0       	rjmp	.+4      	; 0x64e <pvPortMalloc+0x3a>
            }
            else
            {
                xWantedSize = 0;
     64a:	00 e0       	ldi	r16, 0x00	; 0
     64c:	10 e0       	ldi	r17, 0x00	; 0

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
     64e:	11 23       	and	r17, r17
     650:	0c f4       	brge	.+2      	; 0x654 <pvPortMalloc+0x40>
     652:	66 c0       	rjmp	.+204    	; 0x720 <pvPortMalloc+0x10c>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     654:	01 15       	cp	r16, r1
     656:	11 05       	cpc	r17, r1
     658:	09 f4       	brne	.+2      	; 0x65c <pvPortMalloc+0x48>
     65a:	65 c0       	rjmp	.+202    	; 0x726 <pvPortMalloc+0x112>
     65c:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <xFreeBytesRemaining>
     660:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <xFreeBytesRemaining+0x1>
     664:	80 17       	cp	r24, r16
     666:	91 07       	cpc	r25, r17
     668:	08 f4       	brcc	.+2      	; 0x66c <pvPortMalloc+0x58>
     66a:	60 c0       	rjmp	.+192    	; 0x72c <pvPortMalloc+0x118>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     66c:	c0 91 78 00 	lds	r28, 0x0078	; 0x800078 <xStart>
     670:	d0 91 79 00 	lds	r29, 0x0079	; 0x800079 <xStart+0x1>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     674:	e8 e7       	ldi	r30, 0x78	; 120
     676:	f0 e0       	ldi	r31, 0x00	; 0
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     678:	02 c0       	rjmp	.+4      	; 0x67e <pvPortMalloc+0x6a>
                {
                    pxPreviousBlock = pxBlock;
     67a:	fe 01       	movw	r30, r28
                    pxBlock = pxBlock->pxNextFreeBlock;
     67c:	ec 01       	movw	r28, r24
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     67e:	8a 81       	ldd	r24, Y+2	; 0x02
     680:	9b 81       	ldd	r25, Y+3	; 0x03
     682:	80 17       	cp	r24, r16
     684:	91 07       	cpc	r25, r17
     686:	20 f4       	brcc	.+8      	; 0x690 <pvPortMalloc+0x7c>
     688:	88 81       	ld	r24, Y
     68a:	99 81       	ldd	r25, Y+1	; 0x01
     68c:	00 97       	sbiw	r24, 0x00	; 0
     68e:	a9 f7       	brne	.-22     	; 0x67a <pvPortMalloc+0x66>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     690:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <pxEnd>
     694:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <pxEnd+0x1>
     698:	c8 17       	cp	r28, r24
     69a:	d9 07       	cpc	r29, r25
     69c:	09 f4       	brne	.+2      	; 0x6a0 <pvPortMalloc+0x8c>
     69e:	49 c0       	rjmp	.+146    	; 0x732 <pvPortMalloc+0x11e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     6a0:	e0 80       	ld	r14, Z
     6a2:	f1 80       	ldd	r15, Z+1	; 0x01
     6a4:	84 e0       	ldi	r24, 0x04	; 4
     6a6:	e8 0e       	add	r14, r24
     6a8:	f1 1c       	adc	r15, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     6aa:	88 81       	ld	r24, Y
     6ac:	99 81       	ldd	r25, Y+1	; 0x01
     6ae:	91 83       	std	Z+1, r25	; 0x01
     6b0:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     6b2:	2a 81       	ldd	r18, Y+2	; 0x02
     6b4:	3b 81       	ldd	r19, Y+3	; 0x03
     6b6:	20 1b       	sub	r18, r16
     6b8:	31 0b       	sbc	r19, r17
     6ba:	29 30       	cpi	r18, 0x09	; 9
     6bc:	31 05       	cpc	r19, r1
     6be:	50 f0       	brcs	.+20     	; 0x6d4 <pvPortMalloc+0xc0>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     6c0:	ce 01       	movw	r24, r28
     6c2:	80 0f       	add	r24, r16
     6c4:	91 1f       	adc	r25, r17
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     6c6:	fc 01       	movw	r30, r24
     6c8:	33 83       	std	Z+3, r19	; 0x03
     6ca:	22 83       	std	Z+2, r18	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     6cc:	1b 83       	std	Y+3, r17	; 0x03
     6ce:	0a 83       	std	Y+2, r16	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     6d0:	0e 94 c0 02 	call	0x580	; 0x580 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     6d4:	2a 81       	ldd	r18, Y+2	; 0x02
     6d6:	3b 81       	ldd	r19, Y+3	; 0x03
     6d8:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <xFreeBytesRemaining>
     6dc:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <xFreeBytesRemaining+0x1>
     6e0:	82 1b       	sub	r24, r18
     6e2:	93 0b       	sbc	r25, r19
     6e4:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <xFreeBytesRemaining+0x1>
     6e8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     6ec:	40 91 72 00 	lds	r20, 0x0072	; 0x800072 <xMinimumEverFreeBytesRemaining>
     6f0:	50 91 73 00 	lds	r21, 0x0073	; 0x800073 <xMinimumEverFreeBytesRemaining+0x1>
     6f4:	84 17       	cp	r24, r20
     6f6:	95 07       	cpc	r25, r21
     6f8:	20 f4       	brcc	.+8      	; 0x702 <pvPortMalloc+0xee>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6fa:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <xMinimumEverFreeBytesRemaining+0x1>
     6fe:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
     702:	30 68       	ori	r19, 0x80	; 128
     704:	3b 83       	std	Y+3, r19	; 0x03
     706:	2a 83       	std	Y+2, r18	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     708:	19 82       	std	Y+1, r1	; 0x01
     70a:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     70c:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <xNumberOfSuccessfulAllocations>
     710:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <xNumberOfSuccessfulAllocations+0x1>
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <xNumberOfSuccessfulAllocations+0x1>
     71a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <xNumberOfSuccessfulAllocations>
     71e:	0b c0       	rjmp	.+22     	; 0x736 <pvPortMalloc+0x122>
void * pvPortMalloc( size_t xWantedSize )
{
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
     720:	e1 2c       	mov	r14, r1
     722:	f1 2c       	mov	r15, r1
     724:	08 c0       	rjmp	.+16     	; 0x736 <pvPortMalloc+0x122>
     726:	e1 2c       	mov	r14, r1
     728:	f1 2c       	mov	r15, r1
     72a:	05 c0       	rjmp	.+10     	; 0x736 <pvPortMalloc+0x122>
     72c:	e1 2c       	mov	r14, r1
     72e:	f1 2c       	mov	r15, r1
     730:	02 c0       	rjmp	.+4      	; 0x736 <pvPortMalloc+0x122>
     732:	e1 2c       	mov	r14, r1
     734:	f1 2c       	mov	r15, r1
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     736:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     73a:	c7 01       	movw	r24, r14
     73c:	df 91       	pop	r29
     73e:	cf 91       	pop	r28
     740:	1f 91       	pop	r17
     742:	0f 91       	pop	r16
     744:	ff 90       	pop	r15
     746:	ef 90       	pop	r14
     748:	08 95       	ret

0000074a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     752:	00 97       	sbiw	r24, 0x00	; 0
     754:	49 f1       	breq	.+82     	; 0x7a8 <vPortFree+0x5e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
     756:	ec 01       	movw	r28, r24
     758:	24 97       	sbiw	r28, 0x04	; 4
        pxLink = ( void * ) puc;

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
     75a:	2a 81       	ldd	r18, Y+2	; 0x02
     75c:	3b 81       	ldd	r19, Y+3	; 0x03
     75e:	33 23       	and	r19, r19
     760:	1c f5       	brge	.+70     	; 0x7a8 <vPortFree+0x5e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     762:	48 81       	ld	r20, Y
     764:	59 81       	ldd	r21, Y+1	; 0x01
     766:	45 2b       	or	r20, r21
     768:	f9 f4       	brne	.+62     	; 0x7a8 <vPortFree+0x5e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
     76a:	3f 77       	andi	r19, 0x7F	; 127
     76c:	3b 83       	std	Y+3, r19	; 0x03
     76e:	2a 83       	std	Y+2, r18	; 0x02
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
     770:	0e 94 51 09 	call	0x12a2	; 0x12a2 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	9b 81       	ldd	r25, Y+3	; 0x03
     778:	20 91 74 00 	lds	r18, 0x0074	; 0x800074 <xFreeBytesRemaining>
     77c:	30 91 75 00 	lds	r19, 0x0075	; 0x800075 <xFreeBytesRemaining+0x1>
     780:	82 0f       	add	r24, r18
     782:	93 1f       	adc	r25, r19
     784:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <xFreeBytesRemaining+0x1>
     788:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     78c:	ce 01       	movw	r24, r28
     78e:	0e 94 c0 02 	call	0x580	; 0x580 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     792:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
     796:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
     7a0:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
                }
                ( void ) xTaskResumeAll();
     7a4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	08 95       	ret

000007b2 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     7b2:	0f b6       	in	r0, 0x3f	; 63
     7b4:	f8 94       	cli
     7b6:	0f 92       	push	r0
     7b8:	fc 01       	movw	r30, r24
     7ba:	82 8d       	ldd	r24, Z+26	; 0x1a
     7bc:	81 11       	cpse	r24, r1
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <prvIsQueueEmpty+0x12>
     7c0:	81 e0       	ldi	r24, 0x01	; 1
     7c2:	01 c0       	rjmp	.+2      	; 0x7c6 <prvIsQueueEmpty+0x14>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0f 90       	pop	r0
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	08 95       	ret

000007cc <prvIsQueueFull>:
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	f8 94       	cli
     7d0:	0f 92       	push	r0
     7d2:	fc 01       	movw	r30, r24
     7d4:	22 8d       	ldd	r18, Z+26	; 0x1a
     7d6:	83 8d       	ldd	r24, Z+27	; 0x1b
     7d8:	28 13       	cpse	r18, r24
     7da:	02 c0       	rjmp	.+4      	; 0x7e0 <prvIsQueueFull+0x14>
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <prvIsQueueFull+0x16>
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	0f 90       	pop	r0
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	08 95       	ret

000007e8 <prvCopyDataToQueue>:
     7e8:	0f 93       	push	r16
     7ea:	1f 93       	push	r17
     7ec:	cf 93       	push	r28
     7ee:	df 93       	push	r29
     7f0:	ec 01       	movw	r28, r24
     7f2:	04 2f       	mov	r16, r20
     7f4:	1a 8d       	ldd	r17, Y+26	; 0x1a
     7f6:	4c 8d       	ldd	r20, Y+28	; 0x1c
     7f8:	44 23       	and	r20, r20
     7fa:	b9 f1       	breq	.+110    	; 0x86a <__stack+0xb>
     7fc:	01 11       	cpse	r16, r1
     7fe:	16 c0       	rjmp	.+44     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
     800:	50 e0       	ldi	r21, 0x00	; 0
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	0e 94 3b 10 	call	0x2076	; 0x2076 <memcpy>
     80a:	2c 8d       	ldd	r18, Y+28	; 0x1c
     80c:	8a 81       	ldd	r24, Y+2	; 0x02
     80e:	9b 81       	ldd	r25, Y+3	; 0x03
     810:	82 0f       	add	r24, r18
     812:	91 1d       	adc	r25, r1
     814:	9b 83       	std	Y+3, r25	; 0x03
     816:	8a 83       	std	Y+2, r24	; 0x02
     818:	2c 81       	ldd	r18, Y+4	; 0x04
     81a:	3d 81       	ldd	r19, Y+5	; 0x05
     81c:	82 17       	cp	r24, r18
     81e:	93 07       	cpc	r25, r19
     820:	20 f1       	brcs	.+72     	; 0x86a <__stack+0xb>
     822:	88 81       	ld	r24, Y
     824:	99 81       	ldd	r25, Y+1	; 0x01
     826:	9b 83       	std	Y+3, r25	; 0x03
     828:	8a 83       	std	Y+2, r24	; 0x02
     82a:	1f c0       	rjmp	.+62     	; 0x86a <__stack+0xb>
     82c:	50 e0       	ldi	r21, 0x00	; 0
     82e:	8e 81       	ldd	r24, Y+6	; 0x06
     830:	9f 81       	ldd	r25, Y+7	; 0x07
     832:	0e 94 3b 10 	call	0x2076	; 0x2076 <memcpy>
     836:	8c 8d       	ldd	r24, Y+28	; 0x1c
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	91 95       	neg	r25
     83c:	81 95       	neg	r24
     83e:	91 09       	sbc	r25, r1
     840:	2e 81       	ldd	r18, Y+6	; 0x06
     842:	3f 81       	ldd	r19, Y+7	; 0x07
     844:	28 0f       	add	r18, r24
     846:	39 1f       	adc	r19, r25
     848:	3f 83       	std	Y+7, r19	; 0x07
     84a:	2e 83       	std	Y+6, r18	; 0x06
     84c:	48 81       	ld	r20, Y
     84e:	59 81       	ldd	r21, Y+1	; 0x01
     850:	24 17       	cp	r18, r20
     852:	35 07       	cpc	r19, r21
     854:	30 f4       	brcc	.+12     	; 0x862 <__stack+0x3>
     856:	2c 81       	ldd	r18, Y+4	; 0x04
     858:	3d 81       	ldd	r19, Y+5	; 0x05
     85a:	82 0f       	add	r24, r18
     85c:	93 1f       	adc	r25, r19
     85e:	9f 83       	std	Y+7, r25	; 0x07
     860:	8e 83       	std	Y+6, r24	; 0x06
     862:	02 30       	cpi	r16, 0x02	; 2
     864:	11 f4       	brne	.+4      	; 0x86a <__stack+0xb>
     866:	11 11       	cpse	r17, r1
     868:	11 50       	subi	r17, 0x01	; 1
     86a:	1f 5f       	subi	r17, 0xFF	; 255
     86c:	1a 8f       	std	Y+26, r17	; 0x1a
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	08 95       	ret

0000087a <prvCopyDataFromQueue>:
     87a:	fc 01       	movw	r30, r24
     87c:	44 8d       	ldd	r20, Z+28	; 0x1c
     87e:	44 23       	and	r20, r20
     880:	a9 f0       	breq	.+42     	; 0x8ac <prvCopyDataFromQueue+0x32>
     882:	50 e0       	ldi	r21, 0x00	; 0
     884:	26 81       	ldd	r18, Z+6	; 0x06
     886:	37 81       	ldd	r19, Z+7	; 0x07
     888:	24 0f       	add	r18, r20
     88a:	35 1f       	adc	r19, r21
     88c:	37 83       	std	Z+7, r19	; 0x07
     88e:	26 83       	std	Z+6, r18	; 0x06
     890:	84 81       	ldd	r24, Z+4	; 0x04
     892:	95 81       	ldd	r25, Z+5	; 0x05
     894:	28 17       	cp	r18, r24
     896:	39 07       	cpc	r19, r25
     898:	20 f0       	brcs	.+8      	; 0x8a2 <prvCopyDataFromQueue+0x28>
     89a:	80 81       	ld	r24, Z
     89c:	91 81       	ldd	r25, Z+1	; 0x01
     89e:	97 83       	std	Z+7, r25	; 0x07
     8a0:	86 83       	std	Z+6, r24	; 0x06
     8a2:	cb 01       	movw	r24, r22
     8a4:	66 81       	ldd	r22, Z+6	; 0x06
     8a6:	77 81       	ldd	r23, Z+7	; 0x07
     8a8:	0e 94 3b 10 	call	0x2076	; 0x2076 <memcpy>
     8ac:	08 95       	ret

000008ae <prvUnlockQueue>:
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ec 01       	movw	r28, r24
     8b6:	0f b6       	in	r0, 0x3f	; 63
     8b8:	f8 94       	cli
     8ba:	0f 92       	push	r0
     8bc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     8be:	0b c0       	rjmp	.+22     	; 0x8d6 <prvUnlockQueue+0x28>
     8c0:	89 89       	ldd	r24, Y+17	; 0x11
     8c2:	88 23       	and	r24, r24
     8c4:	51 f0       	breq	.+20     	; 0x8da <prvUnlockQueue+0x2c>
     8c6:	ce 01       	movw	r24, r28
     8c8:	41 96       	adiw	r24, 0x11	; 17
     8ca:	0e 94 02 0c 	call	0x1804	; 0x1804 <xTaskRemoveFromEventList>
     8ce:	81 11       	cpse	r24, r1
     8d0:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskMissedYield>
     8d4:	11 50       	subi	r17, 0x01	; 1
     8d6:	11 16       	cp	r1, r17
     8d8:	9c f3       	brlt	.-26     	; 0x8c0 <prvUnlockQueue+0x12>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	8e 8f       	std	Y+30, r24	; 0x1e
     8de:	0f 90       	pop	r0
     8e0:	0f be       	out	0x3f, r0	; 63
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	f8 94       	cli
     8e6:	0f 92       	push	r0
     8e8:	1d 8d       	ldd	r17, Y+29	; 0x1d
     8ea:	0b c0       	rjmp	.+22     	; 0x902 <prvUnlockQueue+0x54>
     8ec:	88 85       	ldd	r24, Y+8	; 0x08
     8ee:	88 23       	and	r24, r24
     8f0:	51 f0       	breq	.+20     	; 0x906 <prvUnlockQueue+0x58>
     8f2:	ce 01       	movw	r24, r28
     8f4:	08 96       	adiw	r24, 0x08	; 8
     8f6:	0e 94 02 0c 	call	0x1804	; 0x1804 <xTaskRemoveFromEventList>
     8fa:	81 11       	cpse	r24, r1
     8fc:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <vTaskMissedYield>
     900:	11 50       	subi	r17, 0x01	; 1
     902:	11 16       	cp	r1, r17
     904:	9c f3       	brlt	.-26     	; 0x8ec <prvUnlockQueue+0x3e>
     906:	8f ef       	ldi	r24, 0xFF	; 255
     908:	8d 8f       	std	Y+29, r24	; 0x1d
     90a:	0f 90       	pop	r0
     90c:	0f be       	out	0x3f, r0	; 63
     90e:	df 91       	pop	r29
     910:	cf 91       	pop	r28
     912:	1f 91       	pop	r17
     914:	08 95       	ret

00000916 <xQueueGenericReset>:
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	fc 01       	movw	r30, r24
     920:	36 2f       	mov	r19, r22
     922:	89 2b       	or	r24, r25
     924:	09 f4       	brne	.+2      	; 0x928 <xQueueGenericReset+0x12>
     926:	4d c0       	rjmp	.+154    	; 0x9c2 <xQueueGenericReset+0xac>
     928:	23 8d       	ldd	r18, Z+27	; 0x1b
     92a:	22 23       	and	r18, r18
     92c:	09 f4       	brne	.+2      	; 0x930 <xQueueGenericReset+0x1a>
     92e:	4b c0       	rjmp	.+150    	; 0x9c6 <xQueueGenericReset+0xb0>
     930:	02 2f       	mov	r16, r18
     932:	10 e0       	ldi	r17, 0x00	; 0
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	9f ef       	ldi	r25, 0xFF	; 255
     938:	b8 01       	movw	r22, r16
     93a:	0e 94 21 10 	call	0x2042	; 0x2042 <__udivmodhi4>
     93e:	44 8d       	ldd	r20, Z+28	; 0x1c
     940:	84 2f       	mov	r24, r20
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	68 17       	cp	r22, r24
     946:	79 07       	cpc	r23, r25
     948:	08 f4       	brcc	.+2      	; 0x94c <xQueueGenericReset+0x36>
     94a:	3f c0       	rjmp	.+126    	; 0x9ca <xQueueGenericReset+0xb4>
     94c:	ef 01       	movw	r28, r30
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	0f 92       	push	r0
     954:	60 81       	ld	r22, Z
     956:	71 81       	ldd	r23, Z+1	; 0x01
     958:	fb 01       	movw	r30, r22
     95a:	24 9f       	mul	r18, r20
     95c:	e0 0d       	add	r30, r0
     95e:	f1 1d       	adc	r31, r1
     960:	11 24       	eor	r1, r1
     962:	fd 83       	std	Y+5, r31	; 0x05
     964:	ec 83       	std	Y+4, r30	; 0x04
     966:	1a 8e       	std	Y+26, r1	; 0x1a
     968:	7b 83       	std	Y+3, r23	; 0x03
     96a:	6a 83       	std	Y+2, r22	; 0x02
     96c:	01 50       	subi	r16, 0x01	; 1
     96e:	11 09       	sbc	r17, r1
     970:	80 9f       	mul	r24, r16
     972:	a0 01       	movw	r20, r0
     974:	81 9f       	mul	r24, r17
     976:	50 0d       	add	r21, r0
     978:	90 9f       	mul	r25, r16
     97a:	50 0d       	add	r21, r0
     97c:	11 24       	eor	r1, r1
     97e:	cb 01       	movw	r24, r22
     980:	84 0f       	add	r24, r20
     982:	95 1f       	adc	r25, r21
     984:	9f 83       	std	Y+7, r25	; 0x07
     986:	8e 83       	std	Y+6, r24	; 0x06
     988:	8f ef       	ldi	r24, 0xFF	; 255
     98a:	8d 8f       	std	Y+29, r24	; 0x1d
     98c:	8e 8f       	std	Y+30, r24	; 0x1e
     98e:	31 11       	cpse	r19, r1
     990:	0c c0       	rjmp	.+24     	; 0x9aa <xQueueGenericReset+0x94>
     992:	88 85       	ldd	r24, Y+8	; 0x08
     994:	88 23       	and	r24, r24
     996:	89 f0       	breq	.+34     	; 0x9ba <xQueueGenericReset+0xa4>
     998:	ce 01       	movw	r24, r28
     99a:	08 96       	adiw	r24, 0x08	; 8
     99c:	0e 94 02 0c 	call	0x1804	; 0x1804 <xTaskRemoveFromEventList>
     9a0:	88 23       	and	r24, r24
     9a2:	59 f0       	breq	.+22     	; 0x9ba <xQueueGenericReset+0xa4>
     9a4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     9a8:	08 c0       	rjmp	.+16     	; 0x9ba <xQueueGenericReset+0xa4>
     9aa:	ce 01       	movw	r24, r28
     9ac:	08 96       	adiw	r24, 0x08	; 8
     9ae:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     9b2:	ce 01       	movw	r24, r28
     9b4:	41 96       	adiw	r24, 0x11	; 17
     9b6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     9ba:	0f 90       	pop	r0
     9bc:	0f be       	out	0x3f, r0	; 63
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	05 c0       	rjmp	.+10     	; 0x9cc <xQueueGenericReset+0xb6>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	03 c0       	rjmp	.+6      	; 0x9cc <xQueueGenericReset+0xb6>
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	01 c0       	rjmp	.+2      	; 0x9cc <xQueueGenericReset+0xb6>
     9ca:	80 e0       	ldi	r24, 0x00	; 0
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	08 95       	ret

000009d6 <prvInitialiseNewQueue>:
     9d6:	0f 93       	push	r16
     9d8:	1f 93       	push	r17
     9da:	f8 01       	movw	r30, r16
     9dc:	61 11       	cpse	r22, r1
     9de:	03 c0       	rjmp	.+6      	; 0x9e6 <prvInitialiseNewQueue+0x10>
     9e0:	11 83       	std	Z+1, r17	; 0x01
     9e2:	00 83       	st	Z, r16
     9e4:	02 c0       	rjmp	.+4      	; 0x9ea <prvInitialiseNewQueue+0x14>
     9e6:	51 83       	std	Z+1, r21	; 0x01
     9e8:	40 83       	st	Z, r20
     9ea:	83 8f       	std	Z+27, r24	; 0x1b
     9ec:	64 8f       	std	Z+28, r22	; 0x1c
     9ee:	61 e0       	ldi	r22, 0x01	; 1
     9f0:	cf 01       	movw	r24, r30
     9f2:	0e 94 8b 04 	call	0x916	; 0x916 <xQueueGenericReset>
     9f6:	1f 91       	pop	r17
     9f8:	0f 91       	pop	r16
     9fa:	08 95       	ret

000009fc <xQueueGenericCreate>:
     9fc:	df 92       	push	r13
     9fe:	ef 92       	push	r14
     a00:	ff 92       	push	r15
     a02:	0f 93       	push	r16
     a04:	1f 93       	push	r17
     a06:	cf 93       	push	r28
     a08:	df 93       	push	r29
     a0a:	38 2f       	mov	r19, r24
     a0c:	e6 2f       	mov	r30, r22
     a0e:	88 23       	and	r24, r24
     a10:	29 f1       	breq	.+74     	; 0xa5c <xQueueGenericCreate+0x60>
     a12:	68 2f       	mov	r22, r24
     a14:	70 e0       	ldi	r23, 0x00	; 0
     a16:	8f ef       	ldi	r24, 0xFF	; 255
     a18:	9f ef       	ldi	r25, 0xFF	; 255
     a1a:	0e 94 21 10 	call	0x2042	; 0x2042 <__udivmodhi4>
     a1e:	8e 2f       	mov	r24, r30
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	68 17       	cp	r22, r24
     a24:	79 07       	cpc	r23, r25
     a26:	e8 f0       	brcs	.+58     	; 0xa62 <xQueueGenericCreate+0x66>
     a28:	3e 9f       	mul	r19, r30
     a2a:	c0 01       	movw	r24, r0
     a2c:	11 24       	eor	r1, r1
     a2e:	81 3e       	cpi	r24, 0xE1	; 225
     a30:	2f ef       	ldi	r18, 0xFF	; 255
     a32:	92 07       	cpc	r25, r18
     a34:	c8 f4       	brcc	.+50     	; 0xa68 <xQueueGenericCreate+0x6c>
     a36:	d4 2e       	mov	r13, r20
     a38:	de 2f       	mov	r29, r30
     a3a:	c3 2f       	mov	r28, r19
     a3c:	4f 96       	adiw	r24, 0x1f	; 31
     a3e:	0e 94 0a 03 	call	0x614	; 0x614 <pvPortMalloc>
     a42:	7c 01       	movw	r14, r24
     a44:	00 97       	sbiw	r24, 0x00	; 0
     a46:	91 f0       	breq	.+36     	; 0xa6c <xQueueGenericCreate+0x70>
     a48:	8c 01       	movw	r16, r24
     a4a:	2d 2d       	mov	r18, r13
     a4c:	ac 01       	movw	r20, r24
     a4e:	41 5e       	subi	r20, 0xE1	; 225
     a50:	5f 4f       	sbci	r21, 0xFF	; 255
     a52:	6d 2f       	mov	r22, r29
     a54:	8c 2f       	mov	r24, r28
     a56:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <prvInitialiseNewQueue>
     a5a:	08 c0       	rjmp	.+16     	; 0xa6c <xQueueGenericCreate+0x70>
     a5c:	e1 2c       	mov	r14, r1
     a5e:	f1 2c       	mov	r15, r1
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <xQueueGenericCreate+0x70>
     a62:	e1 2c       	mov	r14, r1
     a64:	f1 2c       	mov	r15, r1
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <xQueueGenericCreate+0x70>
     a68:	e1 2c       	mov	r14, r1
     a6a:	f1 2c       	mov	r15, r1
     a6c:	c7 01       	movw	r24, r14
     a6e:	df 91       	pop	r29
     a70:	cf 91       	pop	r28
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	08 95       	ret

00000a7e <xQueueGenericSend>:
     a7e:	cf 92       	push	r12
     a80:	df 92       	push	r13
     a82:	ef 92       	push	r14
     a84:	ff 92       	push	r15
     a86:	0f 93       	push	r16
     a88:	1f 93       	push	r17
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	00 d0       	rcall	.+0      	; 0xa90 <xQueueGenericSend+0x12>
     a90:	00 d0       	rcall	.+0      	; 0xa92 <xQueueGenericSend+0x14>
     a92:	1f 92       	push	r1
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	8c 01       	movw	r16, r24
     a9a:	7b 01       	movw	r14, r22
     a9c:	5d 83       	std	Y+5, r21	; 0x05
     a9e:	4c 83       	std	Y+4, r20	; 0x04
     aa0:	c2 2e       	mov	r12, r18
     aa2:	d1 2c       	mov	r13, r1
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	f8 94       	cli
     aa8:	0f 92       	push	r0
     aaa:	f8 01       	movw	r30, r16
     aac:	92 8d       	ldd	r25, Z+26	; 0x1a
     aae:	83 8d       	ldd	r24, Z+27	; 0x1b
     ab0:	98 17       	cp	r25, r24
     ab2:	18 f0       	brcs	.+6      	; 0xaba <xQueueGenericSend+0x3c>
     ab4:	f2 e0       	ldi	r31, 0x02	; 2
     ab6:	cf 12       	cpse	r12, r31
     ab8:	19 c0       	rjmp	.+50     	; 0xaec <xQueueGenericSend+0x6e>
     aba:	4c 2d       	mov	r20, r12
     abc:	b7 01       	movw	r22, r14
     abe:	c8 01       	movw	r24, r16
     ac0:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <prvCopyDataToQueue>
     ac4:	f8 01       	movw	r30, r16
     ac6:	91 89       	ldd	r25, Z+17	; 0x11
     ac8:	99 23       	and	r25, r25
     aca:	49 f0       	breq	.+18     	; 0xade <xQueueGenericSend+0x60>
     acc:	c8 01       	movw	r24, r16
     ace:	41 96       	adiw	r24, 0x11	; 17
     ad0:	0e 94 02 0c 	call	0x1804	; 0x1804 <xTaskRemoveFromEventList>
     ad4:	88 23       	and	r24, r24
     ad6:	31 f0       	breq	.+12     	; 0xae4 <xQueueGenericSend+0x66>
     ad8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     adc:	03 c0       	rjmp	.+6      	; 0xae4 <xQueueGenericSend+0x66>
     ade:	81 11       	cpse	r24, r1
     ae0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	4d c0       	rjmp	.+154    	; 0xb86 <xQueueGenericSend+0x108>
     aec:	8c 81       	ldd	r24, Y+4	; 0x04
     aee:	9d 81       	ldd	r25, Y+5	; 0x05
     af0:	89 2b       	or	r24, r25
     af2:	21 f4       	brne	.+8      	; 0xafc <xQueueGenericSend+0x7e>
     af4:	0f 90       	pop	r0
     af6:	0f be       	out	0x3f, r0	; 63
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	45 c0       	rjmp	.+138    	; 0xb86 <xQueueGenericSend+0x108>
     afc:	d1 10       	cpse	r13, r1
     afe:	06 c0       	rjmp	.+12     	; 0xb0c <xQueueGenericSend+0x8e>
     b00:	ce 01       	movw	r24, r28
     b02:	01 96       	adiw	r24, 0x01	; 1
     b04:	0e 94 bf 0c 	call	0x197e	; 0x197e <vTaskInternalSetTimeOutState>
     b08:	dd 24       	eor	r13, r13
     b0a:	d3 94       	inc	r13
     b0c:	0f 90       	pop	r0
     b0e:	0f be       	out	0x3f, r0	; 63
     b10:	0e 94 51 09 	call	0x12a2	; 0x12a2 <vTaskSuspendAll>
     b14:	0f b6       	in	r0, 0x3f	; 63
     b16:	f8 94       	cli
     b18:	0f 92       	push	r0
     b1a:	f8 01       	movw	r30, r16
     b1c:	85 8d       	ldd	r24, Z+29	; 0x1d
     b1e:	8f 3f       	cpi	r24, 0xFF	; 255
     b20:	09 f4       	brne	.+2      	; 0xb24 <xQueueGenericSend+0xa6>
     b22:	15 8e       	std	Z+29, r1	; 0x1d
     b24:	f8 01       	movw	r30, r16
     b26:	86 8d       	ldd	r24, Z+30	; 0x1e
     b28:	8f 3f       	cpi	r24, 0xFF	; 255
     b2a:	09 f4       	brne	.+2      	; 0xb2e <xQueueGenericSend+0xb0>
     b2c:	16 8e       	std	Z+30, r1	; 0x1e
     b2e:	0f 90       	pop	r0
     b30:	0f be       	out	0x3f, r0	; 63
     b32:	be 01       	movw	r22, r28
     b34:	6c 5f       	subi	r22, 0xFC	; 252
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	ce 01       	movw	r24, r28
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	0e 94 ca 0c 	call	0x1994	; 0x1994 <xTaskCheckForTimeOut>
     b40:	81 11       	cpse	r24, r1
     b42:	1b c0       	rjmp	.+54     	; 0xb7a <xQueueGenericSend+0xfc>
     b44:	c8 01       	movw	r24, r16
     b46:	0e 94 e6 03 	call	0x7cc	; 0x7cc <prvIsQueueFull>
     b4a:	88 23       	and	r24, r24
     b4c:	81 f0       	breq	.+32     	; 0xb6e <xQueueGenericSend+0xf0>
     b4e:	6c 81       	ldd	r22, Y+4	; 0x04
     b50:	7d 81       	ldd	r23, Y+5	; 0x05
     b52:	c8 01       	movw	r24, r16
     b54:	08 96       	adiw	r24, 0x08	; 8
     b56:	0e 94 a7 0b 	call	0x174e	; 0x174e <vTaskPlaceOnEventList>
     b5a:	c8 01       	movw	r24, r16
     b5c:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     b60:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
     b64:	81 11       	cpse	r24, r1
     b66:	9e cf       	rjmp	.-196    	; 0xaa4 <xQueueGenericSend+0x26>
     b68:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     b6c:	9b cf       	rjmp	.-202    	; 0xaa4 <xQueueGenericSend+0x26>
     b6e:	c8 01       	movw	r24, r16
     b70:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     b74:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
     b78:	95 cf       	rjmp	.-214    	; 0xaa4 <xQueueGenericSend+0x26>
     b7a:	c8 01       	movw	r24, r16
     b7c:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     b80:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	0f 90       	pop	r0
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	df 90       	pop	r13
     b9e:	cf 90       	pop	r12
     ba0:	08 95       	ret

00000ba2 <xQueueGenericSendFromISR>:
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	8a 01       	movw	r16, r20
     bb0:	fc 01       	movw	r30, r24
     bb2:	52 8d       	ldd	r21, Z+26	; 0x1a
     bb4:	33 8d       	ldd	r19, Z+27	; 0x1b
     bb6:	53 17       	cp	r21, r19
     bb8:	10 f0       	brcs	.+4      	; 0xbbe <xQueueGenericSendFromISR+0x1c>
     bba:	22 30       	cpi	r18, 0x02	; 2
     bbc:	21 f5       	brne	.+72     	; 0xc06 <xQueueGenericSendFromISR+0x64>
     bbe:	42 2f       	mov	r20, r18
     bc0:	78 01       	movw	r14, r16
     bc2:	ec 01       	movw	r28, r24
     bc4:	1e 8d       	ldd	r17, Y+30	; 0x1e
     bc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     bc8:	ce 01       	movw	r24, r28
     bca:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <prvCopyDataToQueue>
     bce:	1f 3f       	cpi	r17, 0xFF	; 255
     bd0:	81 f4       	brne	.+32     	; 0xbf2 <xQueueGenericSendFromISR+0x50>
     bd2:	89 89       	ldd	r24, Y+17	; 0x11
     bd4:	88 23       	and	r24, r24
     bd6:	c9 f0       	breq	.+50     	; 0xc0a <xQueueGenericSendFromISR+0x68>
     bd8:	ce 01       	movw	r24, r28
     bda:	41 96       	adiw	r24, 0x11	; 17
     bdc:	0e 94 02 0c 	call	0x1804	; 0x1804 <xTaskRemoveFromEventList>
     be0:	88 23       	and	r24, r24
     be2:	a9 f0       	breq	.+42     	; 0xc0e <xQueueGenericSendFromISR+0x6c>
     be4:	e1 14       	cp	r14, r1
     be6:	f1 04       	cpc	r15, r1
     be8:	a1 f0       	breq	.+40     	; 0xc12 <xQueueGenericSendFromISR+0x70>
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	f7 01       	movw	r30, r14
     bee:	80 83       	st	Z, r24
     bf0:	13 c0       	rjmp	.+38     	; 0xc18 <xQueueGenericSendFromISR+0x76>
     bf2:	0e 94 61 09 	call	0x12c2	; 0x12c2 <uxTaskGetNumberOfTasks>
     bf6:	18 17       	cp	r17, r24
     bf8:	70 f4       	brcc	.+28     	; 0xc16 <xQueueGenericSendFromISR+0x74>
     bfa:	ff 24       	eor	r15, r15
     bfc:	f3 94       	inc	r15
     bfe:	f1 0e       	add	r15, r17
     c00:	fe 8e       	std	Y+30, r15	; 0x1e
     c02:	81 e0       	ldi	r24, 0x01	; 1
     c04:	09 c0       	rjmp	.+18     	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	07 c0       	rjmp	.+14     	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	05 c0       	rjmp	.+10     	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	03 c0       	rjmp	.+6      	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	01 c0       	rjmp	.+2      	; 0xc18 <xQueueGenericSendFromISR+0x76>
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	df 91       	pop	r29
     c1a:	cf 91       	pop	r28
     c1c:	1f 91       	pop	r17
     c1e:	0f 91       	pop	r16
     c20:	ff 90       	pop	r15
     c22:	ef 90       	pop	r14
     c24:	08 95       	ret

00000c26 <xQueueReceive>:
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	0f 93       	push	r16
     c30:	1f 93       	push	r17
     c32:	cf 93       	push	r28
     c34:	df 93       	push	r29
     c36:	00 d0       	rcall	.+0      	; 0xc38 <xQueueReceive+0x12>
     c38:	00 d0       	rcall	.+0      	; 0xc3a <xQueueReceive+0x14>
     c3a:	1f 92       	push	r1
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62
     c40:	8c 01       	movw	r16, r24
     c42:	6b 01       	movw	r12, r22
     c44:	5d 83       	std	Y+5, r21	; 0x05
     c46:	4c 83       	std	Y+4, r20	; 0x04
     c48:	e1 2c       	mov	r14, r1
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	0f 92       	push	r0
     c50:	f8 01       	movw	r30, r16
     c52:	f2 8c       	ldd	r15, Z+26	; 0x1a
     c54:	ff 20       	and	r15, r15
     c56:	a9 f0       	breq	.+42     	; 0xc82 <xQueueReceive+0x5c>
     c58:	b6 01       	movw	r22, r12
     c5a:	c8 01       	movw	r24, r16
     c5c:	0e 94 3d 04 	call	0x87a	; 0x87a <prvCopyDataFromQueue>
     c60:	fa 94       	dec	r15
     c62:	f8 01       	movw	r30, r16
     c64:	f2 8e       	std	Z+26, r15	; 0x1a
     c66:	80 85       	ldd	r24, Z+8	; 0x08
     c68:	88 23       	and	r24, r24
     c6a:	39 f0       	breq	.+14     	; 0xc7a <xQueueReceive+0x54>
     c6c:	c8 01       	movw	r24, r16
     c6e:	08 96       	adiw	r24, 0x08	; 8
     c70:	0e 94 02 0c 	call	0x1804	; 0x1804 <xTaskRemoveFromEventList>
     c74:	81 11       	cpse	r24, r1
     c76:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     c7a:	0f 90       	pop	r0
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	53 c0       	rjmp	.+166    	; 0xd28 <xQueueReceive+0x102>
     c82:	8c 81       	ldd	r24, Y+4	; 0x04
     c84:	9d 81       	ldd	r25, Y+5	; 0x05
     c86:	89 2b       	or	r24, r25
     c88:	21 f4       	brne	.+8      	; 0xc92 <xQueueReceive+0x6c>
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	4b c0       	rjmp	.+150    	; 0xd28 <xQueueReceive+0x102>
     c92:	e1 10       	cpse	r14, r1
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <xQueueReceive+0x7c>
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	0e 94 bf 0c 	call	0x197e	; 0x197e <vTaskInternalSetTimeOutState>
     c9e:	ee 24       	eor	r14, r14
     ca0:	e3 94       	inc	r14
     ca2:	0f 90       	pop	r0
     ca4:	0f be       	out	0x3f, r0	; 63
     ca6:	0e 94 51 09 	call	0x12a2	; 0x12a2 <vTaskSuspendAll>
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	0f 92       	push	r0
     cb0:	f8 01       	movw	r30, r16
     cb2:	85 8d       	ldd	r24, Z+29	; 0x1d
     cb4:	8f 3f       	cpi	r24, 0xFF	; 255
     cb6:	09 f4       	brne	.+2      	; 0xcba <xQueueReceive+0x94>
     cb8:	15 8e       	std	Z+29, r1	; 0x1d
     cba:	f8 01       	movw	r30, r16
     cbc:	86 8d       	ldd	r24, Z+30	; 0x1e
     cbe:	8f 3f       	cpi	r24, 0xFF	; 255
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <xQueueReceive+0x9e>
     cc2:	16 8e       	std	Z+30, r1	; 0x1e
     cc4:	0f 90       	pop	r0
     cc6:	0f be       	out	0x3f, r0	; 63
     cc8:	be 01       	movw	r22, r28
     cca:	6c 5f       	subi	r22, 0xFC	; 252
     ccc:	7f 4f       	sbci	r23, 0xFF	; 255
     cce:	ce 01       	movw	r24, r28
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	0e 94 ca 0c 	call	0x1994	; 0x1994 <xTaskCheckForTimeOut>
     cd6:	81 11       	cpse	r24, r1
     cd8:	1b c0       	rjmp	.+54     	; 0xd10 <xQueueReceive+0xea>
     cda:	c8 01       	movw	r24, r16
     cdc:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <prvIsQueueEmpty>
     ce0:	88 23       	and	r24, r24
     ce2:	81 f0       	breq	.+32     	; 0xd04 <xQueueReceive+0xde>
     ce4:	6c 81       	ldd	r22, Y+4	; 0x04
     ce6:	7d 81       	ldd	r23, Y+5	; 0x05
     ce8:	c8 01       	movw	r24, r16
     cea:	41 96       	adiw	r24, 0x11	; 17
     cec:	0e 94 a7 0b 	call	0x174e	; 0x174e <vTaskPlaceOnEventList>
     cf0:	c8 01       	movw	r24, r16
     cf2:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     cf6:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
     cfa:	81 11       	cpse	r24, r1
     cfc:	a6 cf       	rjmp	.-180    	; 0xc4a <xQueueReceive+0x24>
     cfe:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
     d02:	a3 cf       	rjmp	.-186    	; 0xc4a <xQueueReceive+0x24>
     d04:	c8 01       	movw	r24, r16
     d06:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     d0a:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
     d0e:	9d cf       	rjmp	.-198    	; 0xc4a <xQueueReceive+0x24>
     d10:	c8 01       	movw	r24, r16
     d12:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
     d16:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
     d1a:	c8 01       	movw	r24, r16
     d1c:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <prvIsQueueEmpty>
     d20:	88 23       	and	r24, r24
     d22:	09 f4       	brne	.+2      	; 0xd26 <xQueueReceive+0x100>
     d24:	92 cf       	rjmp	.-220    	; 0xc4a <xQueueReceive+0x24>
     d26:	80 e0       	ldi	r24, 0x00	; 0
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	ff 90       	pop	r15
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	08 95       	ret

00000d44 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     d44:	cf 93       	push	r28
     d46:	df 93       	push	r29
     d48:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     d4a:	0f b6       	in	r0, 0x3f	; 63
     d4c:	f8 94       	cli
     d4e:	0f 92       	push	r0
     d50:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d52:	8f 3f       	cpi	r24, 0xFF	; 255
     d54:	09 f4       	brne	.+2      	; 0xd58 <vQueueWaitForMessageRestricted+0x14>
     d56:	1d 8e       	std	Y+29, r1	; 0x1d
     d58:	8e 8d       	ldd	r24, Y+30	; 0x1e
     d5a:	8f 3f       	cpi	r24, 0xFF	; 255
     d5c:	09 f4       	brne	.+2      	; 0xd60 <vQueueWaitForMessageRestricted+0x1c>
     d5e:	1e 8e       	std	Y+30, r1	; 0x1e
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     d64:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d66:	81 11       	cpse	r24, r1
     d68:	04 c0       	rjmp	.+8      	; 0xd72 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     d6a:	ce 01       	movw	r24, r28
     d6c:	41 96       	adiw	r24, 0x11	; 17
     d6e:	0e 94 b9 0b 	call	0x1772	; 0x1772 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     d72:	ce 01       	movw	r24, r28
     d74:	0e 94 57 04 	call	0x8ae	; 0x8ae <prvUnlockQueue>
    }
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	08 95       	ret

00000d7e <prvResetNextTaskUnblockTime>:
         * an interrupt and the current TCB will always be the same for any
         * individual execution thread. */
        xReturn = pxCurrentTCB;

        return xReturn;
    }
     d7e:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <pxDelayedTaskList>
     d82:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <pxDelayedTaskList+0x1>
     d86:	80 81       	ld	r24, Z
     d88:	81 11       	cpse	r24, r1
     d8a:	07 c0       	rjmp	.+14     	; 0xd9a <prvResetNextTaskUnblockTime+0x1c>
     d8c:	8f ef       	ldi	r24, 0xFF	; 255
     d8e:	9f ef       	ldi	r25, 0xFF	; 255
     d90:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <xNextTaskUnblockTime+0x1>
     d94:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <xNextTaskUnblockTime>
     d98:	08 95       	ret
     d9a:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <pxDelayedTaskList>
     d9e:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <pxDelayedTaskList+0x1>
     da2:	05 80       	ldd	r0, Z+5	; 0x05
     da4:	f6 81       	ldd	r31, Z+6	; 0x06
     da6:	e0 2d       	mov	r30, r0
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <xNextTaskUnblockTime+0x1>
     db0:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <xNextTaskUnblockTime>
     db4:	08 95       	ret

00000db6 <prvDeleteTCB>:
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	ec 01       	movw	r28, r24
     dbc:	8f 89       	ldd	r24, Y+23	; 0x17
     dbe:	98 8d       	ldd	r25, Y+24	; 0x18
     dc0:	0e 94 a5 03 	call	0x74a	; 0x74a <vPortFree>
     dc4:	ce 01       	movw	r24, r28
     dc6:	0e 94 a5 03 	call	0x74a	; 0x74a <vPortFree>
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <prvInitialiseNewTask>:
     dd0:	2f 92       	push	r2
     dd2:	3f 92       	push	r3
     dd4:	4f 92       	push	r4
     dd6:	5f 92       	push	r5
     dd8:	6f 92       	push	r6
     dda:	7f 92       	push	r7
     ddc:	8f 92       	push	r8
     dde:	9f 92       	push	r9
     de0:	af 92       	push	r10
     de2:	bf 92       	push	r11
     de4:	cf 92       	push	r12
     de6:	df 92       	push	r13
     de8:	ef 92       	push	r14
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	1c 01       	movw	r2, r24
     df8:	4b 01       	movw	r8, r22
     dfa:	29 01       	movw	r4, r18
     dfc:	3a 01       	movw	r6, r20
     dfe:	a9 01       	movw	r20, r18
     e00:	65 ea       	ldi	r22, 0xA5	; 165
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	f5 01       	movw	r30, r10
     e06:	87 89       	ldd	r24, Z+23	; 0x17
     e08:	90 8d       	ldd	r25, Z+24	; 0x18
     e0a:	0e 94 44 10 	call	0x2088	; 0x2088 <memset>
     e0e:	f5 01       	movw	r30, r10
     e10:	87 89       	ldd	r24, Z+23	; 0x17
     e12:	90 8d       	ldd	r25, Z+24	; 0x18
     e14:	f1 e0       	ldi	r31, 0x01	; 1
     e16:	4f 1a       	sub	r4, r31
     e18:	51 08       	sbc	r5, r1
     e1a:	48 0e       	add	r4, r24
     e1c:	59 1e       	adc	r5, r25
     e1e:	81 14       	cp	r8, r1
     e20:	91 04       	cpc	r9, r1
     e22:	89 f4       	brne	.+34     	; 0xe46 <prvInitialiseNewTask+0x76>
     e24:	15 c0       	rjmp	.+42     	; 0xe50 <prvInitialiseNewTask+0x80>
     e26:	82 2f       	mov	r24, r18
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	f4 01       	movw	r30, r8
     e2c:	e8 0f       	add	r30, r24
     e2e:	f9 1f       	adc	r31, r25
     e30:	30 81       	ld	r19, Z
     e32:	d5 01       	movw	r26, r10
     e34:	a8 0f       	add	r26, r24
     e36:	b9 1f       	adc	r27, r25
     e38:	59 96       	adiw	r26, 0x19	; 25
     e3a:	3c 93       	st	X, r19
     e3c:	80 81       	ld	r24, Z
     e3e:	88 23       	and	r24, r24
     e40:	29 f0       	breq	.+10     	; 0xe4c <prvInitialiseNewTask+0x7c>
     e42:	2f 5f       	subi	r18, 0xFF	; 255
     e44:	01 c0       	rjmp	.+2      	; 0xe48 <prvInitialiseNewTask+0x78>
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	2a 30       	cpi	r18, 0x0A	; 10
     e4a:	68 f3       	brcs	.-38     	; 0xe26 <prvInitialiseNewTask+0x56>
     e4c:	f5 01       	movw	r30, r10
     e4e:	12 a2       	std	Z+34, r1	; 0x22
     e50:	f3 e0       	ldi	r31, 0x03	; 3
     e52:	fe 15       	cp	r31, r14
     e54:	20 f4       	brcc	.+8      	; 0xe5e <prvInitialiseNewTask+0x8e>
     e56:	0f 2e       	mov	r0, r31
     e58:	f3 e0       	ldi	r31, 0x03	; 3
     e5a:	ef 2e       	mov	r14, r31
     e5c:	f0 2d       	mov	r31, r0
     e5e:	f5 01       	movw	r30, r10
     e60:	e6 8a       	std	Z+22, r14	; 0x16
     e62:	c5 01       	movw	r24, r10
     e64:	02 96       	adiw	r24, 0x02	; 2
     e66:	0e 94 e5 00 	call	0x1ca	; 0x1ca <vListInitialiseItem>
     e6a:	c5 01       	movw	r24, r10
     e6c:	0c 96       	adiw	r24, 0x0c	; 12
     e6e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <vListInitialiseItem>
     e72:	f5 01       	movw	r30, r10
     e74:	b1 86       	std	Z+9, r11	; 0x09
     e76:	a0 86       	std	Z+8, r10	; 0x08
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	8e 19       	sub	r24, r14
     e7e:	91 09       	sbc	r25, r1
     e80:	95 87       	std	Z+13, r25	; 0x0d
     e82:	84 87       	std	Z+12, r24	; 0x0c
     e84:	b3 8a       	std	Z+19, r11	; 0x13
     e86:	a2 8a       	std	Z+18, r10	; 0x12
     e88:	a8 01       	movw	r20, r16
     e8a:	b1 01       	movw	r22, r2
     e8c:	c2 01       	movw	r24, r4
     e8e:	0e 94 4a 01 	call	0x294	; 0x294 <pxPortInitialiseStack>
     e92:	f5 01       	movw	r30, r10
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	80 83       	st	Z, r24
     e98:	c1 14       	cp	r12, r1
     e9a:	d1 04       	cpc	r13, r1
     e9c:	19 f0       	breq	.+6      	; 0xea4 <prvInitialiseNewTask+0xd4>
     e9e:	f6 01       	movw	r30, r12
     ea0:	b1 82       	std	Z+1, r11	; 0x01
     ea2:	a0 82       	st	Z, r10
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	1f 91       	pop	r17
     eaa:	0f 91       	pop	r16
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	9f 90       	pop	r9
     eb8:	8f 90       	pop	r8
     eba:	7f 90       	pop	r7
     ebc:	6f 90       	pop	r6
     ebe:	5f 90       	pop	r5
     ec0:	4f 90       	pop	r4
     ec2:	3f 90       	pop	r3
     ec4:	2f 90       	pop	r2
     ec6:	08 95       	ret

00000ec8 <prvInitialiseTaskLists>:
     ec8:	cf 93       	push	r28
     eca:	c0 e0       	ldi	r28, 0x00	; 0
     ecc:	10 c0       	rjmp	.+32     	; 0xeee <prvInitialiseTaskLists+0x26>
     ece:	8c 2f       	mov	r24, r28
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	9c 01       	movw	r18, r24
     ed4:	22 0f       	add	r18, r18
     ed6:	33 1f       	adc	r19, r19
     ed8:	22 0f       	add	r18, r18
     eda:	33 1f       	adc	r19, r19
     edc:	22 0f       	add	r18, r18
     ede:	33 1f       	adc	r19, r19
     ee0:	82 0f       	add	r24, r18
     ee2:	93 1f       	adc	r25, r19
     ee4:	83 52       	subi	r24, 0x23	; 35
     ee6:	9c 4f       	sbci	r25, 0xFC	; 252
     ee8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     eec:	cf 5f       	subi	r28, 0xFF	; 255
     eee:	c4 30       	cpi	r28, 0x04	; 4
     ef0:	70 f3       	brcs	.-36     	; 0xece <prvInitialiseTaskLists+0x6>
     ef2:	84 ed       	ldi	r24, 0xD4	; 212
     ef4:	93 e0       	ldi	r25, 0x03	; 3
     ef6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     efa:	8b ec       	ldi	r24, 0xCB	; 203
     efc:	93 e0       	ldi	r25, 0x03	; 3
     efe:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     f02:	8e eb       	ldi	r24, 0xBE	; 190
     f04:	93 e0       	ldi	r25, 0x03	; 3
     f06:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     f0a:	85 eb       	ldi	r24, 0xB5	; 181
     f0c:	93 e0       	ldi	r25, 0x03	; 3
     f0e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     f12:	8b ea       	ldi	r24, 0xAB	; 171
     f14:	93 e0       	ldi	r25, 0x03	; 3
     f16:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
     f1a:	84 ed       	ldi	r24, 0xD4	; 212
     f1c:	93 e0       	ldi	r25, 0x03	; 3
     f1e:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <pxDelayedTaskList+0x1>
     f22:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <pxDelayedTaskList>
     f26:	8b ec       	ldi	r24, 0xCB	; 203
     f28:	93 e0       	ldi	r25, 0x03	; 3
     f2a:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <pxOverflowDelayedTaskList+0x1>
     f2e:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <pxOverflowDelayedTaskList>
     f32:	cf 91       	pop	r28
     f34:	08 95       	ret

00000f36 <prvAddNewTaskToReadyList>:
     f36:	cf 93       	push	r28
     f38:	df 93       	push	r29
     f3a:	ec 01       	movw	r28, r24
     f3c:	0f b6       	in	r0, 0x3f	; 63
     f3e:	f8 94       	cli
     f40:	0f 92       	push	r0
     f42:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxCurrentNumberOfTasks>
     f46:	8f 5f       	subi	r24, 0xFF	; 255
     f48:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <uxCurrentNumberOfTasks>
     f4c:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <pxCurrentTCB>
     f50:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
     f54:	89 2b       	or	r24, r25
     f56:	59 f4       	brne	.+22     	; 0xf6e <prvAddNewTaskToReadyList+0x38>
     f58:	d0 93 02 04 	sts	0x0402, r29	; 0x800402 <pxCurrentTCB+0x1>
     f5c:	c0 93 01 04 	sts	0x0401, r28	; 0x800401 <pxCurrentTCB>
     f60:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxCurrentNumberOfTasks>
     f64:	81 30       	cpi	r24, 0x01	; 1
     f66:	99 f4       	brne	.+38     	; 0xf8e <prvAddNewTaskToReadyList+0x58>
     f68:	0e 94 64 07 	call	0xec8	; 0xec8 <prvInitialiseTaskLists>
     f6c:	10 c0       	rjmp	.+32     	; 0xf8e <prvAddNewTaskToReadyList+0x58>
     f6e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <xSchedulerRunning>
     f72:	81 11       	cpse	r24, r1
     f74:	0c c0       	rjmp	.+24     	; 0xf8e <prvAddNewTaskToReadyList+0x58>
     f76:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <pxCurrentTCB>
     f7a:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
     f7e:	96 89       	ldd	r25, Z+22	; 0x16
     f80:	8e 89       	ldd	r24, Y+22	; 0x16
     f82:	89 17       	cp	r24, r25
     f84:	20 f0       	brcs	.+8      	; 0xf8e <prvAddNewTaskToReadyList+0x58>
     f86:	d0 93 02 04 	sts	0x0402, r29	; 0x800402 <pxCurrentTCB+0x1>
     f8a:	c0 93 01 04 	sts	0x0401, r28	; 0x800401 <pxCurrentTCB>
     f8e:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <uxTaskNumber>
     f92:	8f 5f       	subi	r24, 0xFF	; 255
     f94:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <uxTaskNumber>
     f98:	8e 89       	ldd	r24, Y+22	; 0x16
     f9a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <uxTopReadyPriority>
     f9e:	98 17       	cp	r25, r24
     fa0:	10 f4       	brcc	.+4      	; 0xfa6 <prvAddNewTaskToReadyList+0x70>
     fa2:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <uxTopReadyPriority>
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	fc 01       	movw	r30, r24
     faa:	ee 0f       	add	r30, r30
     fac:	ff 1f       	adc	r31, r31
     fae:	ee 0f       	add	r30, r30
     fb0:	ff 1f       	adc	r31, r31
     fb2:	ee 0f       	add	r30, r30
     fb4:	ff 1f       	adc	r31, r31
     fb6:	8e 0f       	add	r24, r30
     fb8:	9f 1f       	adc	r25, r31
     fba:	fc 01       	movw	r30, r24
     fbc:	e3 52       	subi	r30, 0x23	; 35
     fbe:	fc 4f       	sbci	r31, 0xFC	; 252
     fc0:	01 80       	ldd	r0, Z+1	; 0x01
     fc2:	f2 81       	ldd	r31, Z+2	; 0x02
     fc4:	e0 2d       	mov	r30, r0
     fc6:	fd 83       	std	Y+5, r31	; 0x05
     fc8:	ec 83       	std	Y+4, r30	; 0x04
     fca:	84 81       	ldd	r24, Z+4	; 0x04
     fcc:	95 81       	ldd	r25, Z+5	; 0x05
     fce:	9f 83       	std	Y+7, r25	; 0x07
     fd0:	8e 83       	std	Y+6, r24	; 0x06
     fd2:	a4 81       	ldd	r26, Z+4	; 0x04
     fd4:	b5 81       	ldd	r27, Z+5	; 0x05
     fd6:	ce 01       	movw	r24, r28
     fd8:	02 96       	adiw	r24, 0x02	; 2
     fda:	13 96       	adiw	r26, 0x03	; 3
     fdc:	9c 93       	st	X, r25
     fde:	8e 93       	st	-X, r24
     fe0:	12 97       	sbiw	r26, 0x02	; 2
     fe2:	95 83       	std	Z+5, r25	; 0x05
     fe4:	84 83       	std	Z+4, r24	; 0x04
     fe6:	ee 89       	ldd	r30, Y+22	; 0x16
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	cf 01       	movw	r24, r30
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	e8 0f       	add	r30, r24
     ffa:	f9 1f       	adc	r31, r25
     ffc:	e3 52       	subi	r30, 0x23	; 35
     ffe:	fc 4f       	sbci	r31, 0xFC	; 252
    1000:	fb 87       	std	Y+11, r31	; 0x0b
    1002:	ea 87       	std	Y+10, r30	; 0x0a
    1004:	80 81       	ld	r24, Z
    1006:	8f 5f       	subi	r24, 0xFF	; 255
    1008:	80 83       	st	Z, r24
    100a:	0f 90       	pop	r0
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <xSchedulerRunning>
    1012:	88 23       	and	r24, r24
    1014:	51 f0       	breq	.+20     	; 0x102a <prvAddNewTaskToReadyList+0xf4>
    1016:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <pxCurrentTCB>
    101a:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    101e:	96 89       	ldd	r25, Z+22	; 0x16
    1020:	8e 89       	ldd	r24, Y+22	; 0x16
    1022:	98 17       	cp	r25, r24
    1024:	10 f4       	brcc	.+4      	; 0x102a <prvAddNewTaskToReadyList+0xf4>
    1026:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <prvCheckTasksWaitingTermination>:
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	1c c0       	rjmp	.+56     	; 0x106e <prvCheckTasksWaitingTermination+0x3e>
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	f8 94       	cli
    103a:	0f 92       	push	r0
    103c:	e0 91 ba 03 	lds	r30, 0x03BA	; 0x8003ba <xTasksWaitingTermination+0x5>
    1040:	f0 91 bb 03 	lds	r31, 0x03BB	; 0x8003bb <xTasksWaitingTermination+0x6>
    1044:	c6 81       	ldd	r28, Z+6	; 0x06
    1046:	d7 81       	ldd	r29, Z+7	; 0x07
    1048:	ce 01       	movw	r24, r28
    104a:	02 96       	adiw	r24, 0x02	; 2
    104c:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>
    1050:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxCurrentNumberOfTasks>
    1054:	81 50       	subi	r24, 0x01	; 1
    1056:	80 93 aa 03 	sts	0x03AA, r24	; 0x8003aa <uxCurrentNumberOfTasks>
    105a:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <uxDeletedTasksWaitingCleanUp>
    105e:	81 50       	subi	r24, 0x01	; 1
    1060:	80 93 b4 03 	sts	0x03B4, r24	; 0x8003b4 <uxDeletedTasksWaitingCleanUp>
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	ce 01       	movw	r24, r28
    106a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <prvDeleteTCB>
    106e:	80 91 b4 03 	lds	r24, 0x03B4	; 0x8003b4 <uxDeletedTasksWaitingCleanUp>
    1072:	81 11       	cpse	r24, r1
    1074:	e0 cf       	rjmp	.-64     	; 0x1036 <prvCheckTasksWaitingTermination+0x6>
    1076:	df 91       	pop	r29
    1078:	cf 91       	pop	r28
    107a:	08 95       	ret

0000107c <prvIdleTask>:
    107c:	0e 94 18 08 	call	0x1030	; 0x1030 <prvCheckTasksWaitingTermination>
    1080:	80 91 dd 03 	lds	r24, 0x03DD	; 0x8003dd <pxReadyTasksLists>
    1084:	82 30       	cpi	r24, 0x02	; 2
    1086:	d0 f3       	brcs	.-12     	; 0x107c <prvIdleTask>
    1088:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    108c:	f7 cf       	rjmp	.-18     	; 0x107c <prvIdleTask>

0000108e <prvAddCurrentTaskToDelayedList>:
    108e:	ff 92       	push	r15
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	ec 01       	movw	r28, r24
    109a:	f6 2e       	mov	r15, r22
    109c:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <xTickCount>
    10a0:	10 91 a9 03 	lds	r17, 0x03A9	; 0x8003a9 <xTickCount+0x1>
    10a4:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <pxCurrentTCB>
    10a8:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    10ac:	02 96       	adiw	r24, 0x02	; 2
    10ae:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>
    10b2:	cf 3f       	cpi	r28, 0xFF	; 255
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	d8 07       	cpc	r29, r24
    10b8:	b1 f5       	brne	.+108    	; 0x1126 <prvAddCurrentTaskToDelayedList+0x98>
    10ba:	ff 20       	and	r15, r15
    10bc:	a1 f1       	breq	.+104    	; 0x1126 <prvAddCurrentTaskToDelayedList+0x98>
    10be:	eb ea       	ldi	r30, 0xAB	; 171
    10c0:	f3 e0       	ldi	r31, 0x03	; 3
    10c2:	a1 81       	ldd	r26, Z+1	; 0x01
    10c4:	b2 81       	ldd	r27, Z+2	; 0x02
    10c6:	c0 91 01 04 	lds	r28, 0x0401	; 0x800401 <pxCurrentTCB>
    10ca:	d0 91 02 04 	lds	r29, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    10ce:	bd 83       	std	Y+5, r27	; 0x05
    10d0:	ac 83       	std	Y+4, r26	; 0x04
    10d2:	c0 91 01 04 	lds	r28, 0x0401	; 0x800401 <pxCurrentTCB>
    10d6:	d0 91 02 04 	lds	r29, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    10da:	14 96       	adiw	r26, 0x04	; 4
    10dc:	8d 91       	ld	r24, X+
    10de:	9c 91       	ld	r25, X
    10e0:	15 97       	sbiw	r26, 0x05	; 5
    10e2:	9f 83       	std	Y+7, r25	; 0x07
    10e4:	8e 83       	std	Y+6, r24	; 0x06
    10e6:	14 96       	adiw	r26, 0x04	; 4
    10e8:	cd 91       	ld	r28, X+
    10ea:	dc 91       	ld	r29, X
    10ec:	15 97       	sbiw	r26, 0x05	; 5
    10ee:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <pxCurrentTCB>
    10f2:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    10f6:	02 96       	adiw	r24, 0x02	; 2
    10f8:	9b 83       	std	Y+3, r25	; 0x03
    10fa:	8a 83       	std	Y+2, r24	; 0x02
    10fc:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <pxCurrentTCB>
    1100:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    1104:	02 96       	adiw	r24, 0x02	; 2
    1106:	15 96       	adiw	r26, 0x05	; 5
    1108:	9c 93       	st	X, r25
    110a:	8e 93       	st	-X, r24
    110c:	14 97       	sbiw	r26, 0x04	; 4
    110e:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <pxCurrentTCB>
    1112:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    1116:	1b 96       	adiw	r26, 0x0b	; 11
    1118:	fc 93       	st	X, r31
    111a:	ee 93       	st	-X, r30
    111c:	1a 97       	sbiw	r26, 0x0a	; 10
    111e:	80 81       	ld	r24, Z
    1120:	8f 5f       	subi	r24, 0xFF	; 255
    1122:	80 83       	st	Z, r24
    1124:	2f c0       	rjmp	.+94     	; 0x1184 <prvAddCurrentTaskToDelayedList+0xf6>
    1126:	c0 0f       	add	r28, r16
    1128:	d1 1f       	adc	r29, r17
    112a:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <pxCurrentTCB>
    112e:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    1132:	d3 83       	std	Z+3, r29	; 0x03
    1134:	c2 83       	std	Z+2, r28	; 0x02
    1136:	c0 17       	cp	r28, r16
    1138:	d1 07       	cpc	r29, r17
    113a:	68 f4       	brcc	.+26     	; 0x1156 <prvAddCurrentTaskToDelayedList+0xc8>
    113c:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <pxCurrentTCB>
    1140:	70 91 02 04 	lds	r23, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    1144:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <pxOverflowDelayedTaskList>
    1148:	90 91 c8 03 	lds	r25, 0x03C8	; 0x8003c8 <pxOverflowDelayedTaskList+0x1>
    114c:	6e 5f       	subi	r22, 0xFE	; 254
    114e:	7f 4f       	sbci	r23, 0xFF	; 255
    1150:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    1154:	17 c0       	rjmp	.+46     	; 0x1184 <prvAddCurrentTaskToDelayedList+0xf6>
    1156:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <pxCurrentTCB>
    115a:	70 91 02 04 	lds	r23, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    115e:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <pxDelayedTaskList>
    1162:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <pxDelayedTaskList+0x1>
    1166:	6e 5f       	subi	r22, 0xFE	; 254
    1168:	7f 4f       	sbci	r23, 0xFF	; 255
    116a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    116e:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <xNextTaskUnblockTime>
    1172:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <xNextTaskUnblockTime+0x1>
    1176:	c8 17       	cp	r28, r24
    1178:	d9 07       	cpc	r29, r25
    117a:	20 f4       	brcc	.+8      	; 0x1184 <prvAddCurrentTaskToDelayedList+0xf6>
    117c:	d0 93 a0 03 	sts	0x03A0, r29	; 0x8003a0 <xNextTaskUnblockTime+0x1>
    1180:	c0 93 9f 03 	sts	0x039F, r28	; 0x80039f <xNextTaskUnblockTime>
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	1f 91       	pop	r17
    118a:	0f 91       	pop	r16
    118c:	ff 90       	pop	r15
    118e:	08 95       	ret

00001190 <xTaskCreate>:
    1190:	2f 92       	push	r2
    1192:	3f 92       	push	r3
    1194:	4f 92       	push	r4
    1196:	5f 92       	push	r5
    1198:	6f 92       	push	r6
    119a:	7f 92       	push	r7
    119c:	8f 92       	push	r8
    119e:	9f 92       	push	r9
    11a0:	af 92       	push	r10
    11a2:	bf 92       	push	r11
    11a4:	cf 92       	push	r12
    11a6:	df 92       	push	r13
    11a8:	ef 92       	push	r14
    11aa:	ff 92       	push	r15
    11ac:	0f 93       	push	r16
    11ae:	1f 93       	push	r17
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	3c 01       	movw	r6, r24
    11b6:	1b 01       	movw	r2, r22
    11b8:	5a 01       	movw	r10, r20
    11ba:	29 01       	movw	r4, r18
    11bc:	ca 01       	movw	r24, r20
    11be:	0e 94 0a 03 	call	0x614	; 0x614 <pvPortMalloc>
    11c2:	6c 01       	movw	r12, r24
    11c4:	89 2b       	or	r24, r25
    11c6:	99 f0       	breq	.+38     	; 0x11ee <xTaskCreate+0x5e>
    11c8:	88 e2       	ldi	r24, 0x28	; 40
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 0a 03 	call	0x614	; 0x614 <pvPortMalloc>
    11d0:	ec 01       	movw	r28, r24
    11d2:	89 2b       	or	r24, r25
    11d4:	41 f0       	breq	.+16     	; 0x11e6 <xTaskCreate+0x56>
    11d6:	88 e2       	ldi	r24, 0x28	; 40
    11d8:	fe 01       	movw	r30, r28
    11da:	11 92       	st	Z+, r1
    11dc:	8a 95       	dec	r24
    11de:	e9 f7       	brne	.-6      	; 0x11da <xTaskCreate+0x4a>
    11e0:	d8 8e       	std	Y+24, r13	; 0x18
    11e2:	cf 8a       	std	Y+23, r12	; 0x17
    11e4:	06 c0       	rjmp	.+12     	; 0x11f2 <xTaskCreate+0x62>
    11e6:	c6 01       	movw	r24, r12
    11e8:	0e 94 a5 03 	call	0x74a	; 0x74a <vPortFree>
    11ec:	02 c0       	rjmp	.+4      	; 0x11f2 <xTaskCreate+0x62>
    11ee:	c0 e0       	ldi	r28, 0x00	; 0
    11f0:	d0 e0       	ldi	r29, 0x00	; 0
    11f2:	20 97       	sbiw	r28, 0x00	; 0
    11f4:	91 f0       	breq	.+36     	; 0x121a <xTaskCreate+0x8a>
    11f6:	95 01       	movw	r18, r10
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	50 e0       	ldi	r21, 0x00	; 0
    11fc:	81 2c       	mov	r8, r1
    11fe:	91 2c       	mov	r9, r1
    1200:	5e 01       	movw	r10, r28
    1202:	67 01       	movw	r12, r14
    1204:	e0 2e       	mov	r14, r16
    1206:	82 01       	movw	r16, r4
    1208:	b1 01       	movw	r22, r2
    120a:	c3 01       	movw	r24, r6
    120c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <prvInitialiseNewTask>
    1210:	ce 01       	movw	r24, r28
    1212:	0e 94 9b 07 	call	0xf36	; 0xf36 <prvAddNewTaskToReadyList>
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	01 c0       	rjmp	.+2      	; 0x121c <xTaskCreate+0x8c>
    121a:	8f ef       	ldi	r24, 0xFF	; 255
    121c:	df 91       	pop	r29
    121e:	cf 91       	pop	r28
    1220:	1f 91       	pop	r17
    1222:	0f 91       	pop	r16
    1224:	ff 90       	pop	r15
    1226:	ef 90       	pop	r14
    1228:	df 90       	pop	r13
    122a:	cf 90       	pop	r12
    122c:	bf 90       	pop	r11
    122e:	af 90       	pop	r10
    1230:	9f 90       	pop	r9
    1232:	8f 90       	pop	r8
    1234:	7f 90       	pop	r7
    1236:	6f 90       	pop	r6
    1238:	5f 90       	pop	r5
    123a:	4f 90       	pop	r4
    123c:	3f 90       	pop	r3
    123e:	2f 90       	pop	r2
    1240:	08 95       	ret

00001242 <vTaskStartScheduler>:
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	0f 2e       	mov	r0, r31
    124a:	fd e9       	ldi	r31, 0x9D	; 157
    124c:	ef 2e       	mov	r14, r31
    124e:	f3 e0       	ldi	r31, 0x03	; 3
    1250:	ff 2e       	mov	r15, r31
    1252:	f0 2d       	mov	r31, r0
    1254:	00 e0       	ldi	r16, 0x00	; 0
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	45 e5       	ldi	r20, 0x55	; 85
    125c:	50 e0       	ldi	r21, 0x00	; 0
    125e:	61 e6       	ldi	r22, 0x61	; 97
    1260:	70 e0       	ldi	r23, 0x00	; 0
    1262:	8e e3       	ldi	r24, 0x3E	; 62
    1264:	98 e0       	ldi	r25, 0x08	; 8
    1266:	0e 94 c8 08 	call	0x1190	; 0x1190 <xTaskCreate>
    126a:	81 30       	cpi	r24, 0x01	; 1
    126c:	11 f4       	brne	.+4      	; 0x1272 <vTaskStartScheduler+0x30>
    126e:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <xTimerCreateTimerTask>
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	81 f4       	brne	.+32     	; 0x1296 <vTaskStartScheduler+0x54>
    1276:	f8 94       	cli
    1278:	8f ef       	ldi	r24, 0xFF	; 255
    127a:	9f ef       	ldi	r25, 0xFF	; 255
    127c:	90 93 a0 03 	sts	0x03A0, r25	; 0x8003a0 <xNextTaskUnblockTime+0x1>
    1280:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <xNextTaskUnblockTime>
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <xSchedulerRunning>
    128a:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <xTickCount+0x1>
    128e:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <xTickCount>
    1292:	0e 94 b6 01 	call	0x36c	; 0x36c <xPortStartScheduler>
    1296:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    129a:	0f 91       	pop	r16
    129c:	ff 90       	pop	r15
    129e:	ef 90       	pop	r14
    12a0:	08 95       	ret

000012a2 <vTaskSuspendAll>:
    12a2:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <uxSchedulerSuspended>
    12a6:	8f 5f       	subi	r24, 0xFF	; 255
    12a8:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <uxSchedulerSuspended>
    12ac:	08 95       	ret

000012ae <xTaskGetTickCount>:
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	0f 92       	push	r0
    12b4:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <xTickCount>
    12b8:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <xTickCount+0x1>
    12bc:	0f 90       	pop	r0
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	08 95       	ret

000012c2 <uxTaskGetNumberOfTasks>:
    12c2:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxCurrentNumberOfTasks>
    12c6:	08 95       	ret

000012c8 <xTaskIncrementTick>:
    12c8:	0f 93       	push	r16
    12ca:	1f 93       	push	r17
    12cc:	cf 93       	push	r28
    12ce:	df 93       	push	r29
    12d0:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <uxSchedulerSuspended>
    12d4:	81 11       	cpse	r24, r1
    12d6:	01 c1       	rjmp	.+514    	; 0x14da <xTaskIncrementTick+0x212>
    12d8:	c0 91 a8 03 	lds	r28, 0x03A8	; 0x8003a8 <xTickCount>
    12dc:	d0 91 a9 03 	lds	r29, 0x03A9	; 0x8003a9 <xTickCount+0x1>
    12e0:	8e 01       	movw	r16, r28
    12e2:	0f 5f       	subi	r16, 0xFF	; 255
    12e4:	1f 4f       	sbci	r17, 0xFF	; 255
    12e6:	10 93 a9 03 	sts	0x03A9, r17	; 0x8003a9 <xTickCount+0x1>
    12ea:	00 93 a8 03 	sts	0x03A8, r16	; 0x8003a8 <xTickCount>
    12ee:	01 15       	cp	r16, r1
    12f0:	11 05       	cpc	r17, r1
    12f2:	b9 f4       	brne	.+46     	; 0x1322 <xTaskIncrementTick+0x5a>
    12f4:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <pxDelayedTaskList>
    12f8:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <pxDelayedTaskList+0x1>
    12fc:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <pxOverflowDelayedTaskList>
    1300:	30 91 c8 03 	lds	r19, 0x03C8	; 0x8003c8 <pxOverflowDelayedTaskList+0x1>
    1304:	30 93 ca 03 	sts	0x03CA, r19	; 0x8003ca <pxDelayedTaskList+0x1>
    1308:	20 93 c9 03 	sts	0x03C9, r18	; 0x8003c9 <pxDelayedTaskList>
    130c:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <pxOverflowDelayedTaskList+0x1>
    1310:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <pxOverflowDelayedTaskList>
    1314:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <xNumOfOverflows>
    1318:	8f 5f       	subi	r24, 0xFF	; 255
    131a:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <xNumOfOverflows>
    131e:	0e 94 bf 06 	call	0xd7e	; 0xd7e <prvResetNextTaskUnblockTime>
    1322:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <xNextTaskUnblockTime>
    1326:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <xNextTaskUnblockTime+0x1>
    132a:	08 17       	cp	r16, r24
    132c:	19 07       	cpc	r17, r25
    132e:	20 f4       	brcc	.+8      	; 0x1338 <xTaskIncrementTick+0x70>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	b8 c0       	rjmp	.+368    	; 0x14a4 <xTaskIncrementTick+0x1dc>
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	01 c0       	rjmp	.+2      	; 0x133a <xTaskIncrementTick+0x72>
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <pxDelayedTaskList>
    133e:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <pxDelayedTaskList+0x1>
    1342:	90 81       	ld	r25, Z
    1344:	91 11       	cpse	r25, r1
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <xTaskIncrementTick+0x8e>
    1348:	2f ef       	ldi	r18, 0xFF	; 255
    134a:	3f ef       	ldi	r19, 0xFF	; 255
    134c:	30 93 a0 03 	sts	0x03A0, r19	; 0x8003a0 <xNextTaskUnblockTime+0x1>
    1350:	20 93 9f 03 	sts	0x039F, r18	; 0x80039f <xNextTaskUnblockTime>
    1354:	a7 c0       	rjmp	.+334    	; 0x14a4 <xTaskIncrementTick+0x1dc>
    1356:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <pxDelayedTaskList>
    135a:	f0 91 ca 03 	lds	r31, 0x03CA	; 0x8003ca <pxDelayedTaskList+0x1>
    135e:	05 80       	ldd	r0, Z+5	; 0x05
    1360:	f6 81       	ldd	r31, Z+6	; 0x06
    1362:	e0 2d       	mov	r30, r0
    1364:	06 80       	ldd	r0, Z+6	; 0x06
    1366:	f7 81       	ldd	r31, Z+7	; 0x07
    1368:	e0 2d       	mov	r30, r0
    136a:	22 81       	ldd	r18, Z+2	; 0x02
    136c:	33 81       	ldd	r19, Z+3	; 0x03
    136e:	02 17       	cp	r16, r18
    1370:	13 07       	cpc	r17, r19
    1372:	28 f4       	brcc	.+10     	; 0x137e <xTaskIncrementTick+0xb6>
    1374:	30 93 a0 03 	sts	0x03A0, r19	; 0x8003a0 <xNextTaskUnblockTime+0x1>
    1378:	20 93 9f 03 	sts	0x039F, r18	; 0x80039f <xNextTaskUnblockTime>
    137c:	93 c0       	rjmp	.+294    	; 0x14a4 <xTaskIncrementTick+0x1dc>
    137e:	a2 85       	ldd	r26, Z+10	; 0x0a
    1380:	b3 85       	ldd	r27, Z+11	; 0x0b
    1382:	24 81       	ldd	r18, Z+4	; 0x04
    1384:	35 81       	ldd	r19, Z+5	; 0x05
    1386:	46 81       	ldd	r20, Z+6	; 0x06
    1388:	57 81       	ldd	r21, Z+7	; 0x07
    138a:	e9 01       	movw	r28, r18
    138c:	5d 83       	std	Y+5, r21	; 0x05
    138e:	4c 83       	std	Y+4, r20	; 0x04
    1390:	26 81       	ldd	r18, Z+6	; 0x06
    1392:	37 81       	ldd	r19, Z+7	; 0x07
    1394:	44 81       	ldd	r20, Z+4	; 0x04
    1396:	55 81       	ldd	r21, Z+5	; 0x05
    1398:	e9 01       	movw	r28, r18
    139a:	5b 83       	std	Y+3, r21	; 0x03
    139c:	4a 83       	std	Y+2, r20	; 0x02
    139e:	11 96       	adiw	r26, 0x01	; 1
    13a0:	2d 91       	ld	r18, X+
    13a2:	3c 91       	ld	r19, X
    13a4:	12 97       	sbiw	r26, 0x02	; 2
    13a6:	af 01       	movw	r20, r30
    13a8:	4e 5f       	subi	r20, 0xFE	; 254
    13aa:	5f 4f       	sbci	r21, 0xFF	; 255
    13ac:	24 17       	cp	r18, r20
    13ae:	35 07       	cpc	r19, r21
    13b0:	31 f4       	brne	.+12     	; 0x13be <xTaskIncrementTick+0xf6>
    13b2:	26 81       	ldd	r18, Z+6	; 0x06
    13b4:	37 81       	ldd	r19, Z+7	; 0x07
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	3c 93       	st	X, r19
    13ba:	2e 93       	st	-X, r18
    13bc:	11 97       	sbiw	r26, 0x01	; 1
    13be:	13 86       	std	Z+11, r1	; 0x0b
    13c0:	12 86       	std	Z+10, r1	; 0x0a
    13c2:	9c 91       	ld	r25, X
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	9c 93       	st	X, r25
    13c8:	a4 89       	ldd	r26, Z+20	; 0x14
    13ca:	b5 89       	ldd	r27, Z+21	; 0x15
    13cc:	10 97       	sbiw	r26, 0x00	; 0
    13ce:	19 f1       	breq	.+70     	; 0x1416 <xTaskIncrementTick+0x14e>
    13d0:	26 85       	ldd	r18, Z+14	; 0x0e
    13d2:	37 85       	ldd	r19, Z+15	; 0x0f
    13d4:	60 89       	ldd	r22, Z+16	; 0x10
    13d6:	71 89       	ldd	r23, Z+17	; 0x11
    13d8:	e9 01       	movw	r28, r18
    13da:	7d 83       	std	Y+5, r23	; 0x05
    13dc:	6c 83       	std	Y+4, r22	; 0x04
    13de:	20 89       	ldd	r18, Z+16	; 0x10
    13e0:	31 89       	ldd	r19, Z+17	; 0x11
    13e2:	66 85       	ldd	r22, Z+14	; 0x0e
    13e4:	77 85       	ldd	r23, Z+15	; 0x0f
    13e6:	e9 01       	movw	r28, r18
    13e8:	7b 83       	std	Y+3, r23	; 0x03
    13ea:	6a 83       	std	Y+2, r22	; 0x02
    13ec:	11 96       	adiw	r26, 0x01	; 1
    13ee:	6d 91       	ld	r22, X+
    13f0:	7c 91       	ld	r23, X
    13f2:	12 97       	sbiw	r26, 0x02	; 2
    13f4:	9f 01       	movw	r18, r30
    13f6:	24 5f       	subi	r18, 0xF4	; 244
    13f8:	3f 4f       	sbci	r19, 0xFF	; 255
    13fa:	62 17       	cp	r22, r18
    13fc:	73 07       	cpc	r23, r19
    13fe:	31 f4       	brne	.+12     	; 0x140c <xTaskIncrementTick+0x144>
    1400:	20 89       	ldd	r18, Z+16	; 0x10
    1402:	31 89       	ldd	r19, Z+17	; 0x11
    1404:	12 96       	adiw	r26, 0x02	; 2
    1406:	3c 93       	st	X, r19
    1408:	2e 93       	st	-X, r18
    140a:	11 97       	sbiw	r26, 0x01	; 1
    140c:	15 8a       	std	Z+21, r1	; 0x15
    140e:	14 8a       	std	Z+20, r1	; 0x14
    1410:	9c 91       	ld	r25, X
    1412:	91 50       	subi	r25, 0x01	; 1
    1414:	9c 93       	st	X, r25
    1416:	26 89       	ldd	r18, Z+22	; 0x16
    1418:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <uxTopReadyPriority>
    141c:	92 17       	cp	r25, r18
    141e:	10 f4       	brcc	.+4      	; 0x1424 <xTaskIncrementTick+0x15c>
    1420:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <uxTopReadyPriority>
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	d9 01       	movw	r26, r18
    1428:	aa 0f       	add	r26, r26
    142a:	bb 1f       	adc	r27, r27
    142c:	aa 0f       	add	r26, r26
    142e:	bb 1f       	adc	r27, r27
    1430:	aa 0f       	add	r26, r26
    1432:	bb 1f       	adc	r27, r27
    1434:	2a 0f       	add	r18, r26
    1436:	3b 1f       	adc	r19, r27
    1438:	d9 01       	movw	r26, r18
    143a:	a3 52       	subi	r26, 0x23	; 35
    143c:	bc 4f       	sbci	r27, 0xFC	; 252
    143e:	11 96       	adiw	r26, 0x01	; 1
    1440:	0d 90       	ld	r0, X+
    1442:	bc 91       	ld	r27, X
    1444:	a0 2d       	mov	r26, r0
    1446:	b5 83       	std	Z+5, r27	; 0x05
    1448:	a4 83       	std	Z+4, r26	; 0x04
    144a:	14 96       	adiw	r26, 0x04	; 4
    144c:	2d 91       	ld	r18, X+
    144e:	3c 91       	ld	r19, X
    1450:	15 97       	sbiw	r26, 0x05	; 5
    1452:	37 83       	std	Z+7, r19	; 0x07
    1454:	26 83       	std	Z+6, r18	; 0x06
    1456:	14 96       	adiw	r26, 0x04	; 4
    1458:	2d 91       	ld	r18, X+
    145a:	3c 91       	ld	r19, X
    145c:	15 97       	sbiw	r26, 0x05	; 5
    145e:	e9 01       	movw	r28, r18
    1460:	5b 83       	std	Y+3, r21	; 0x03
    1462:	4a 83       	std	Y+2, r20	; 0x02
    1464:	15 96       	adiw	r26, 0x05	; 5
    1466:	5c 93       	st	X, r21
    1468:	4e 93       	st	-X, r20
    146a:	14 97       	sbiw	r26, 0x04	; 4
    146c:	a6 89       	ldd	r26, Z+22	; 0x16
    146e:	b0 e0       	ldi	r27, 0x00	; 0
    1470:	9d 01       	movw	r18, r26
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	22 0f       	add	r18, r18
    1478:	33 1f       	adc	r19, r19
    147a:	22 0f       	add	r18, r18
    147c:	33 1f       	adc	r19, r19
    147e:	a2 0f       	add	r26, r18
    1480:	b3 1f       	adc	r27, r19
    1482:	a3 52       	subi	r26, 0x23	; 35
    1484:	bc 4f       	sbci	r27, 0xFC	; 252
    1486:	b3 87       	std	Z+11, r27	; 0x0b
    1488:	a2 87       	std	Z+10, r26	; 0x0a
    148a:	9c 91       	ld	r25, X
    148c:	9f 5f       	subi	r25, 0xFF	; 255
    148e:	9c 93       	st	X, r25
    1490:	26 89       	ldd	r18, Z+22	; 0x16
    1492:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <pxCurrentTCB>
    1496:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    149a:	96 89       	ldd	r25, Z+22	; 0x16
    149c:	92 17       	cp	r25, r18
    149e:	08 f4       	brcc	.+2      	; 0x14a2 <xTaskIncrementTick+0x1da>
    14a0:	49 cf       	rjmp	.-366    	; 0x1334 <xTaskIncrementTick+0x6c>
    14a2:	4b cf       	rjmp	.-362    	; 0x133a <xTaskIncrementTick+0x72>
    14a4:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <pxCurrentTCB>
    14a8:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    14ac:	26 89       	ldd	r18, Z+22	; 0x16
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	f9 01       	movw	r30, r18
    14b2:	ee 0f       	add	r30, r30
    14b4:	ff 1f       	adc	r31, r31
    14b6:	ee 0f       	add	r30, r30
    14b8:	ff 1f       	adc	r31, r31
    14ba:	ee 0f       	add	r30, r30
    14bc:	ff 1f       	adc	r31, r31
    14be:	2e 0f       	add	r18, r30
    14c0:	3f 1f       	adc	r19, r31
    14c2:	f9 01       	movw	r30, r18
    14c4:	e3 52       	subi	r30, 0x23	; 35
    14c6:	fc 4f       	sbci	r31, 0xFC	; 252
    14c8:	90 81       	ld	r25, Z
    14ca:	92 30       	cpi	r25, 0x02	; 2
    14cc:	08 f0       	brcs	.+2      	; 0x14d0 <xTaskIncrementTick+0x208>
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <xYieldPending>
    14d4:	91 11       	cpse	r25, r1
    14d6:	0c c0       	rjmp	.+24     	; 0x14f0 <xTaskIncrementTick+0x228>
    14d8:	0c c0       	rjmp	.+24     	; 0x14f2 <xTaskIncrementTick+0x22a>
    14da:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <xPendedTicks>
    14de:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <xPendedTicks+0x1>
    14e2:	01 96       	adiw	r24, 0x01	; 1
    14e4:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <xPendedTicks+0x1>
    14e8:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <xPendedTicks>
    14ec:	80 e0       	ldi	r24, 0x00	; 0
    14ee:	01 c0       	rjmp	.+2      	; 0x14f2 <xTaskIncrementTick+0x22a>
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	df 91       	pop	r29
    14f4:	cf 91       	pop	r28
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	08 95       	ret

000014fc <xTaskResumeAll>:
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	f8 94       	cli
    1504:	0f 92       	push	r0
    1506:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <uxSchedulerSuspended>
    150a:	81 50       	subi	r24, 0x01	; 1
    150c:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <uxSchedulerSuspended>
    1510:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <uxSchedulerSuspended>
    1514:	81 11       	cpse	r24, r1
    1516:	bf c0       	rjmp	.+382    	; 0x1696 <xTaskResumeAll+0x19a>
    1518:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <uxCurrentNumberOfTasks>
    151c:	81 11       	cpse	r24, r1
    151e:	96 c0       	rjmp	.+300    	; 0x164c <xTaskResumeAll+0x150>
    1520:	bd c0       	rjmp	.+378    	; 0x169c <xTaskResumeAll+0x1a0>
    1522:	e0 91 c3 03 	lds	r30, 0x03C3	; 0x8003c3 <xPendingReadyList+0x5>
    1526:	f0 91 c4 03 	lds	r31, 0x03C4	; 0x8003c4 <xPendingReadyList+0x6>
    152a:	06 80       	ldd	r0, Z+6	; 0x06
    152c:	f7 81       	ldd	r31, Z+7	; 0x07
    152e:	e0 2d       	mov	r30, r0
    1530:	a4 89       	ldd	r26, Z+20	; 0x14
    1532:	b5 89       	ldd	r27, Z+21	; 0x15
    1534:	c6 85       	ldd	r28, Z+14	; 0x0e
    1536:	d7 85       	ldd	r29, Z+15	; 0x0f
    1538:	80 89       	ldd	r24, Z+16	; 0x10
    153a:	91 89       	ldd	r25, Z+17	; 0x11
    153c:	9d 83       	std	Y+5, r25	; 0x05
    153e:	8c 83       	std	Y+4, r24	; 0x04
    1540:	c0 89       	ldd	r28, Z+16	; 0x10
    1542:	d1 89       	ldd	r29, Z+17	; 0x11
    1544:	86 85       	ldd	r24, Z+14	; 0x0e
    1546:	97 85       	ldd	r25, Z+15	; 0x0f
    1548:	9b 83       	std	Y+3, r25	; 0x03
    154a:	8a 83       	std	Y+2, r24	; 0x02
    154c:	11 96       	adiw	r26, 0x01	; 1
    154e:	2d 91       	ld	r18, X+
    1550:	3c 91       	ld	r19, X
    1552:	12 97       	sbiw	r26, 0x02	; 2
    1554:	cf 01       	movw	r24, r30
    1556:	0c 96       	adiw	r24, 0x0c	; 12
    1558:	28 17       	cp	r18, r24
    155a:	39 07       	cpc	r19, r25
    155c:	31 f4       	brne	.+12     	; 0x156a <xTaskResumeAll+0x6e>
    155e:	80 89       	ldd	r24, Z+16	; 0x10
    1560:	91 89       	ldd	r25, Z+17	; 0x11
    1562:	12 96       	adiw	r26, 0x02	; 2
    1564:	9c 93       	st	X, r25
    1566:	8e 93       	st	-X, r24
    1568:	11 97       	sbiw	r26, 0x01	; 1
    156a:	15 8a       	std	Z+21, r1	; 0x15
    156c:	14 8a       	std	Z+20, r1	; 0x14
    156e:	8c 91       	ld	r24, X
    1570:	81 50       	subi	r24, 0x01	; 1
    1572:	8c 93       	st	X, r24
    1574:	a2 85       	ldd	r26, Z+10	; 0x0a
    1576:	b3 85       	ldd	r27, Z+11	; 0x0b
    1578:	c4 81       	ldd	r28, Z+4	; 0x04
    157a:	d5 81       	ldd	r29, Z+5	; 0x05
    157c:	86 81       	ldd	r24, Z+6	; 0x06
    157e:	97 81       	ldd	r25, Z+7	; 0x07
    1580:	9d 83       	std	Y+5, r25	; 0x05
    1582:	8c 83       	std	Y+4, r24	; 0x04
    1584:	c6 81       	ldd	r28, Z+6	; 0x06
    1586:	d7 81       	ldd	r29, Z+7	; 0x07
    1588:	84 81       	ldd	r24, Z+4	; 0x04
    158a:	95 81       	ldd	r25, Z+5	; 0x05
    158c:	9b 83       	std	Y+3, r25	; 0x03
    158e:	8a 83       	std	Y+2, r24	; 0x02
    1590:	11 96       	adiw	r26, 0x01	; 1
    1592:	8d 91       	ld	r24, X+
    1594:	9c 91       	ld	r25, X
    1596:	12 97       	sbiw	r26, 0x02	; 2
    1598:	9f 01       	movw	r18, r30
    159a:	2e 5f       	subi	r18, 0xFE	; 254
    159c:	3f 4f       	sbci	r19, 0xFF	; 255
    159e:	82 17       	cp	r24, r18
    15a0:	93 07       	cpc	r25, r19
    15a2:	31 f4       	brne	.+12     	; 0x15b0 <xTaskResumeAll+0xb4>
    15a4:	86 81       	ldd	r24, Z+6	; 0x06
    15a6:	97 81       	ldd	r25, Z+7	; 0x07
    15a8:	12 96       	adiw	r26, 0x02	; 2
    15aa:	9c 93       	st	X, r25
    15ac:	8e 93       	st	-X, r24
    15ae:	11 97       	sbiw	r26, 0x01	; 1
    15b0:	13 86       	std	Z+11, r1	; 0x0b
    15b2:	12 86       	std	Z+10, r1	; 0x0a
    15b4:	8c 91       	ld	r24, X
    15b6:	81 50       	subi	r24, 0x01	; 1
    15b8:	8c 93       	st	X, r24
    15ba:	86 89       	ldd	r24, Z+22	; 0x16
    15bc:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <uxTopReadyPriority>
    15c0:	98 17       	cp	r25, r24
    15c2:	10 f4       	brcc	.+4      	; 0x15c8 <xTaskResumeAll+0xcc>
    15c4:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <uxTopReadyPriority>
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	dc 01       	movw	r26, r24
    15cc:	aa 0f       	add	r26, r26
    15ce:	bb 1f       	adc	r27, r27
    15d0:	aa 0f       	add	r26, r26
    15d2:	bb 1f       	adc	r27, r27
    15d4:	aa 0f       	add	r26, r26
    15d6:	bb 1f       	adc	r27, r27
    15d8:	8a 0f       	add	r24, r26
    15da:	9b 1f       	adc	r25, r27
    15dc:	dc 01       	movw	r26, r24
    15de:	a3 52       	subi	r26, 0x23	; 35
    15e0:	bc 4f       	sbci	r27, 0xFC	; 252
    15e2:	11 96       	adiw	r26, 0x01	; 1
    15e4:	0d 90       	ld	r0, X+
    15e6:	bc 91       	ld	r27, X
    15e8:	a0 2d       	mov	r26, r0
    15ea:	b5 83       	std	Z+5, r27	; 0x05
    15ec:	a4 83       	std	Z+4, r26	; 0x04
    15ee:	14 96       	adiw	r26, 0x04	; 4
    15f0:	8d 91       	ld	r24, X+
    15f2:	9c 91       	ld	r25, X
    15f4:	15 97       	sbiw	r26, 0x05	; 5
    15f6:	97 83       	std	Z+7, r25	; 0x07
    15f8:	86 83       	std	Z+6, r24	; 0x06
    15fa:	14 96       	adiw	r26, 0x04	; 4
    15fc:	cd 91       	ld	r28, X+
    15fe:	dc 91       	ld	r29, X
    1600:	15 97       	sbiw	r26, 0x05	; 5
    1602:	3b 83       	std	Y+3, r19	; 0x03
    1604:	2a 83       	std	Y+2, r18	; 0x02
    1606:	15 96       	adiw	r26, 0x05	; 5
    1608:	3c 93       	st	X, r19
    160a:	2e 93       	st	-X, r18
    160c:	14 97       	sbiw	r26, 0x04	; 4
    160e:	a6 89       	ldd	r26, Z+22	; 0x16
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	cd 01       	movw	r24, r26
    1614:	88 0f       	add	r24, r24
    1616:	99 1f       	adc	r25, r25
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	a8 0f       	add	r26, r24
    1622:	b9 1f       	adc	r27, r25
    1624:	a3 52       	subi	r26, 0x23	; 35
    1626:	bc 4f       	sbci	r27, 0xFC	; 252
    1628:	b3 87       	std	Z+11, r27	; 0x0b
    162a:	a2 87       	std	Z+10, r26	; 0x0a
    162c:	8c 91       	ld	r24, X
    162e:	8f 5f       	subi	r24, 0xFF	; 255
    1630:	8c 93       	st	X, r24
    1632:	96 89       	ldd	r25, Z+22	; 0x16
    1634:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <pxCurrentTCB>
    1638:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    163c:	56 96       	adiw	r26, 0x16	; 22
    163e:	8c 91       	ld	r24, X
    1640:	98 17       	cp	r25, r24
    1642:	30 f0       	brcs	.+12     	; 0x1650 <xTaskResumeAll+0x154>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <xYieldPending>
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <xTaskResumeAll+0x154>
    164c:	e0 e0       	ldi	r30, 0x00	; 0
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 91 be 03 	lds	r24, 0x03BE	; 0x8003be <xPendingReadyList>
    1654:	81 11       	cpse	r24, r1
    1656:	65 cf       	rjmp	.-310    	; 0x1522 <xTaskResumeAll+0x26>
    1658:	ef 2b       	or	r30, r31
    165a:	11 f0       	breq	.+4      	; 0x1660 <xTaskResumeAll+0x164>
    165c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <prvResetNextTaskUnblockTime>
    1660:	c0 91 a4 03 	lds	r28, 0x03A4	; 0x8003a4 <xPendedTicks>
    1664:	d0 91 a5 03 	lds	r29, 0x03A5	; 0x8003a5 <xPendedTicks+0x1>
    1668:	20 97       	sbiw	r28, 0x00	; 0
    166a:	69 f0       	breq	.+26     	; 0x1686 <xTaskResumeAll+0x18a>
    166c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <xTaskIncrementTick>
    1670:	88 23       	and	r24, r24
    1672:	19 f0       	breq	.+6      	; 0x167a <xTaskResumeAll+0x17e>
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <xYieldPending>
    167a:	21 97       	sbiw	r28, 0x01	; 1
    167c:	b9 f7       	brne	.-18     	; 0x166c <xTaskResumeAll+0x170>
    167e:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <xPendedTicks+0x1>
    1682:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <xPendedTicks>
    1686:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <xYieldPending>
    168a:	88 23       	and	r24, r24
    168c:	31 f0       	breq	.+12     	; 0x169a <xTaskResumeAll+0x19e>
    168e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	03 c0       	rjmp	.+6      	; 0x169c <xTaskResumeAll+0x1a0>
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	01 c0       	rjmp	.+2      	; 0x169c <xTaskResumeAll+0x1a0>
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	0f 90       	pop	r0
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	08 95       	ret

000016a6 <vTaskSwitchContext>:
    16a6:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <uxSchedulerSuspended>
    16aa:	88 23       	and	r24, r24
    16ac:	21 f0       	breq	.+8      	; 0x16b6 <vTaskSwitchContext+0x10>
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <xYieldPending>
    16b4:	08 95       	ret
    16b6:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <xYieldPending>
    16ba:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <uxTopReadyPriority>
    16be:	01 c0       	rjmp	.+2      	; 0x16c2 <vTaskSwitchContext+0x1c>
    16c0:	21 50       	subi	r18, 0x01	; 1
    16c2:	82 2f       	mov	r24, r18
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	fc 01       	movw	r30, r24
    16c8:	ee 0f       	add	r30, r30
    16ca:	ff 1f       	adc	r31, r31
    16cc:	ee 0f       	add	r30, r30
    16ce:	ff 1f       	adc	r31, r31
    16d0:	ee 0f       	add	r30, r30
    16d2:	ff 1f       	adc	r31, r31
    16d4:	e8 0f       	add	r30, r24
    16d6:	f9 1f       	adc	r31, r25
    16d8:	e3 52       	subi	r30, 0x23	; 35
    16da:	fc 4f       	sbci	r31, 0xFC	; 252
    16dc:	30 81       	ld	r19, Z
    16de:	33 23       	and	r19, r19
    16e0:	79 f3       	breq	.-34     	; 0x16c0 <vTaskSwitchContext+0x1a>
    16e2:	ac 01       	movw	r20, r24
    16e4:	44 0f       	add	r20, r20
    16e6:	55 1f       	adc	r21, r21
    16e8:	44 0f       	add	r20, r20
    16ea:	55 1f       	adc	r21, r21
    16ec:	44 0f       	add	r20, r20
    16ee:	55 1f       	adc	r21, r21
    16f0:	48 0f       	add	r20, r24
    16f2:	59 1f       	adc	r21, r25
    16f4:	df 01       	movw	r26, r30
    16f6:	01 80       	ldd	r0, Z+1	; 0x01
    16f8:	f2 81       	ldd	r31, Z+2	; 0x02
    16fa:	e0 2d       	mov	r30, r0
    16fc:	02 80       	ldd	r0, Z+2	; 0x02
    16fe:	f3 81       	ldd	r31, Z+3	; 0x03
    1700:	e0 2d       	mov	r30, r0
    1702:	12 96       	adiw	r26, 0x02	; 2
    1704:	fc 93       	st	X, r31
    1706:	ee 93       	st	-X, r30
    1708:	11 97       	sbiw	r26, 0x01	; 1
    170a:	40 52       	subi	r20, 0x20	; 32
    170c:	5c 4f       	sbci	r21, 0xFC	; 252
    170e:	e4 17       	cp	r30, r20
    1710:	f5 07       	cpc	r31, r21
    1712:	29 f4       	brne	.+10     	; 0x171e <vTaskSwitchContext+0x78>
    1714:	42 81       	ldd	r20, Z+2	; 0x02
    1716:	53 81       	ldd	r21, Z+3	; 0x03
    1718:	fd 01       	movw	r30, r26
    171a:	52 83       	std	Z+2, r21	; 0x02
    171c:	41 83       	std	Z+1, r20	; 0x01
    171e:	fc 01       	movw	r30, r24
    1720:	ee 0f       	add	r30, r30
    1722:	ff 1f       	adc	r31, r31
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	8e 0f       	add	r24, r30
    172e:	9f 1f       	adc	r25, r31
    1730:	fc 01       	movw	r30, r24
    1732:	e3 52       	subi	r30, 0x23	; 35
    1734:	fc 4f       	sbci	r31, 0xFC	; 252
    1736:	01 80       	ldd	r0, Z+1	; 0x01
    1738:	f2 81       	ldd	r31, Z+2	; 0x02
    173a:	e0 2d       	mov	r30, r0
    173c:	86 81       	ldd	r24, Z+6	; 0x06
    173e:	97 81       	ldd	r25, Z+7	; 0x07
    1740:	90 93 02 04 	sts	0x0402, r25	; 0x800402 <pxCurrentTCB+0x1>
    1744:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <pxCurrentTCB>
    1748:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <uxTopReadyPriority>
    174c:	08 95       	ret

0000174e <vTaskPlaceOnEventList>:
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	eb 01       	movw	r28, r22
    1754:	60 91 01 04 	lds	r22, 0x0401	; 0x800401 <pxCurrentTCB>
    1758:	70 91 02 04 	lds	r23, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    175c:	64 5f       	subi	r22, 0xF4	; 244
    175e:	7f 4f       	sbci	r23, 0xFF	; 255
    1760:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    1764:	61 e0       	ldi	r22, 0x01	; 1
    1766:	ce 01       	movw	r24, r28
    1768:	0e 94 47 08 	call	0x108e	; 0x108e <prvAddCurrentTaskToDelayedList>
    176c:	df 91       	pop	r29
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <vTaskPlaceOnEventListRestricted>:
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	fc 01       	movw	r30, r24
    177c:	8b 01       	movw	r16, r22
    177e:	a1 81       	ldd	r26, Z+1	; 0x01
    1780:	b2 81       	ldd	r27, Z+2	; 0x02
    1782:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <pxCurrentTCB>
    1786:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    178a:	ec 01       	movw	r28, r24
    178c:	bf 87       	std	Y+15, r27	; 0x0f
    178e:	ae 87       	std	Y+14, r26	; 0x0e
    1790:	80 91 01 04 	lds	r24, 0x0401	; 0x800401 <pxCurrentTCB>
    1794:	90 91 02 04 	lds	r25, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    1798:	14 96       	adiw	r26, 0x04	; 4
    179a:	2d 91       	ld	r18, X+
    179c:	3c 91       	ld	r19, X
    179e:	15 97       	sbiw	r26, 0x05	; 5
    17a0:	ec 01       	movw	r28, r24
    17a2:	39 8b       	std	Y+17, r19	; 0x11
    17a4:	28 8b       	std	Y+16, r18	; 0x10
    17a6:	14 96       	adiw	r26, 0x04	; 4
    17a8:	8d 91       	ld	r24, X+
    17aa:	9c 91       	ld	r25, X
    17ac:	15 97       	sbiw	r26, 0x05	; 5
    17ae:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <pxCurrentTCB>
    17b2:	30 91 02 04 	lds	r19, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    17b6:	24 5f       	subi	r18, 0xF4	; 244
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	ec 01       	movw	r28, r24
    17bc:	3b 83       	std	Y+3, r19	; 0x03
    17be:	2a 83       	std	Y+2, r18	; 0x02
    17c0:	20 91 01 04 	lds	r18, 0x0401	; 0x800401 <pxCurrentTCB>
    17c4:	30 91 02 04 	lds	r19, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    17c8:	24 5f       	subi	r18, 0xF4	; 244
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	15 96       	adiw	r26, 0x05	; 5
    17ce:	3c 93       	st	X, r19
    17d0:	2e 93       	st	-X, r18
    17d2:	14 97       	sbiw	r26, 0x04	; 4
    17d4:	a0 91 01 04 	lds	r26, 0x0401	; 0x800401 <pxCurrentTCB>
    17d8:	b0 91 02 04 	lds	r27, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    17dc:	55 96       	adiw	r26, 0x15	; 21
    17de:	fc 93       	st	X, r31
    17e0:	ee 93       	st	-X, r30
    17e2:	54 97       	sbiw	r26, 0x14	; 20
    17e4:	90 81       	ld	r25, Z
    17e6:	9f 5f       	subi	r25, 0xFF	; 255
    17e8:	90 83       	st	Z, r25
    17ea:	44 23       	and	r20, r20
    17ec:	11 f0       	breq	.+4      	; 0x17f2 <vTaskPlaceOnEventListRestricted+0x80>
    17ee:	0f ef       	ldi	r16, 0xFF	; 255
    17f0:	1f ef       	ldi	r17, 0xFF	; 255
    17f2:	64 2f       	mov	r22, r20
    17f4:	c8 01       	movw	r24, r16
    17f6:	0e 94 47 08 	call	0x108e	; 0x108e <prvAddCurrentTaskToDelayedList>
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	08 95       	ret

00001804 <xTaskRemoveFromEventList>:
    1804:	cf 93       	push	r28
    1806:	df 93       	push	r29
    1808:	dc 01       	movw	r26, r24
    180a:	15 96       	adiw	r26, 0x05	; 5
    180c:	ed 91       	ld	r30, X+
    180e:	fc 91       	ld	r31, X
    1810:	16 97       	sbiw	r26, 0x06	; 6
    1812:	06 80       	ldd	r0, Z+6	; 0x06
    1814:	f7 81       	ldd	r31, Z+7	; 0x07
    1816:	e0 2d       	mov	r30, r0
    1818:	a4 89       	ldd	r26, Z+20	; 0x14
    181a:	b5 89       	ldd	r27, Z+21	; 0x15
    181c:	c6 85       	ldd	r28, Z+14	; 0x0e
    181e:	d7 85       	ldd	r29, Z+15	; 0x0f
    1820:	80 89       	ldd	r24, Z+16	; 0x10
    1822:	91 89       	ldd	r25, Z+17	; 0x11
    1824:	9d 83       	std	Y+5, r25	; 0x05
    1826:	8c 83       	std	Y+4, r24	; 0x04
    1828:	c0 89       	ldd	r28, Z+16	; 0x10
    182a:	d1 89       	ldd	r29, Z+17	; 0x11
    182c:	86 85       	ldd	r24, Z+14	; 0x0e
    182e:	97 85       	ldd	r25, Z+15	; 0x0f
    1830:	9b 83       	std	Y+3, r25	; 0x03
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	11 96       	adiw	r26, 0x01	; 1
    1836:	8d 91       	ld	r24, X+
    1838:	9c 91       	ld	r25, X
    183a:	12 97       	sbiw	r26, 0x02	; 2
    183c:	9f 01       	movw	r18, r30
    183e:	24 5f       	subi	r18, 0xF4	; 244
    1840:	3f 4f       	sbci	r19, 0xFF	; 255
    1842:	82 17       	cp	r24, r18
    1844:	93 07       	cpc	r25, r19
    1846:	31 f4       	brne	.+12     	; 0x1854 <xTaskRemoveFromEventList+0x50>
    1848:	80 89       	ldd	r24, Z+16	; 0x10
    184a:	91 89       	ldd	r25, Z+17	; 0x11
    184c:	12 96       	adiw	r26, 0x02	; 2
    184e:	9c 93       	st	X, r25
    1850:	8e 93       	st	-X, r24
    1852:	11 97       	sbiw	r26, 0x01	; 1
    1854:	15 8a       	std	Z+21, r1	; 0x15
    1856:	14 8a       	std	Z+20, r1	; 0x14
    1858:	8c 91       	ld	r24, X
    185a:	81 50       	subi	r24, 0x01	; 1
    185c:	8c 93       	st	X, r24
    185e:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <uxSchedulerSuspended>
    1862:	81 11       	cpse	r24, r1
    1864:	60 c0       	rjmp	.+192    	; 0x1926 <xTaskRemoveFromEventList+0x122>
    1866:	a2 85       	ldd	r26, Z+10	; 0x0a
    1868:	b3 85       	ldd	r27, Z+11	; 0x0b
    186a:	c4 81       	ldd	r28, Z+4	; 0x04
    186c:	d5 81       	ldd	r29, Z+5	; 0x05
    186e:	86 81       	ldd	r24, Z+6	; 0x06
    1870:	97 81       	ldd	r25, Z+7	; 0x07
    1872:	9d 83       	std	Y+5, r25	; 0x05
    1874:	8c 83       	std	Y+4, r24	; 0x04
    1876:	c6 81       	ldd	r28, Z+6	; 0x06
    1878:	d7 81       	ldd	r29, Z+7	; 0x07
    187a:	84 81       	ldd	r24, Z+4	; 0x04
    187c:	95 81       	ldd	r25, Z+5	; 0x05
    187e:	9b 83       	std	Y+3, r25	; 0x03
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	11 96       	adiw	r26, 0x01	; 1
    1884:	8d 91       	ld	r24, X+
    1886:	9c 91       	ld	r25, X
    1888:	12 97       	sbiw	r26, 0x02	; 2
    188a:	9f 01       	movw	r18, r30
    188c:	2e 5f       	subi	r18, 0xFE	; 254
    188e:	3f 4f       	sbci	r19, 0xFF	; 255
    1890:	82 17       	cp	r24, r18
    1892:	93 07       	cpc	r25, r19
    1894:	31 f4       	brne	.+12     	; 0x18a2 <xTaskRemoveFromEventList+0x9e>
    1896:	86 81       	ldd	r24, Z+6	; 0x06
    1898:	97 81       	ldd	r25, Z+7	; 0x07
    189a:	12 96       	adiw	r26, 0x02	; 2
    189c:	9c 93       	st	X, r25
    189e:	8e 93       	st	-X, r24
    18a0:	11 97       	sbiw	r26, 0x01	; 1
    18a2:	13 86       	std	Z+11, r1	; 0x0b
    18a4:	12 86       	std	Z+10, r1	; 0x0a
    18a6:	8c 91       	ld	r24, X
    18a8:	81 50       	subi	r24, 0x01	; 1
    18aa:	8c 93       	st	X, r24
    18ac:	86 89       	ldd	r24, Z+22	; 0x16
    18ae:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <uxTopReadyPriority>
    18b2:	98 17       	cp	r25, r24
    18b4:	10 f4       	brcc	.+4      	; 0x18ba <xTaskRemoveFromEventList+0xb6>
    18b6:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <uxTopReadyPriority>
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	dc 01       	movw	r26, r24
    18be:	aa 0f       	add	r26, r26
    18c0:	bb 1f       	adc	r27, r27
    18c2:	aa 0f       	add	r26, r26
    18c4:	bb 1f       	adc	r27, r27
    18c6:	aa 0f       	add	r26, r26
    18c8:	bb 1f       	adc	r27, r27
    18ca:	8a 0f       	add	r24, r26
    18cc:	9b 1f       	adc	r25, r27
    18ce:	dc 01       	movw	r26, r24
    18d0:	a3 52       	subi	r26, 0x23	; 35
    18d2:	bc 4f       	sbci	r27, 0xFC	; 252
    18d4:	11 96       	adiw	r26, 0x01	; 1
    18d6:	0d 90       	ld	r0, X+
    18d8:	bc 91       	ld	r27, X
    18da:	a0 2d       	mov	r26, r0
    18dc:	b5 83       	std	Z+5, r27	; 0x05
    18de:	a4 83       	std	Z+4, r26	; 0x04
    18e0:	14 96       	adiw	r26, 0x04	; 4
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	15 97       	sbiw	r26, 0x05	; 5
    18e8:	97 83       	std	Z+7, r25	; 0x07
    18ea:	86 83       	std	Z+6, r24	; 0x06
    18ec:	14 96       	adiw	r26, 0x04	; 4
    18ee:	cd 91       	ld	r28, X+
    18f0:	dc 91       	ld	r29, X
    18f2:	15 97       	sbiw	r26, 0x05	; 5
    18f4:	3b 83       	std	Y+3, r19	; 0x03
    18f6:	2a 83       	std	Y+2, r18	; 0x02
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	3c 93       	st	X, r19
    18fc:	2e 93       	st	-X, r18
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	a6 89       	ldd	r26, Z+22	; 0x16
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	cd 01       	movw	r24, r26
    1906:	88 0f       	add	r24, r24
    1908:	99 1f       	adc	r25, r25
    190a:	88 0f       	add	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	88 0f       	add	r24, r24
    1910:	99 1f       	adc	r25, r25
    1912:	a8 0f       	add	r26, r24
    1914:	b9 1f       	adc	r27, r25
    1916:	a3 52       	subi	r26, 0x23	; 35
    1918:	bc 4f       	sbci	r27, 0xFC	; 252
    191a:	b3 87       	std	Z+11, r27	; 0x0b
    191c:	a2 87       	std	Z+10, r26	; 0x0a
    191e:	8c 91       	ld	r24, X
    1920:	8f 5f       	subi	r24, 0xFF	; 255
    1922:	8c 93       	st	X, r24
    1924:	1c c0       	rjmp	.+56     	; 0x195e <xTaskRemoveFromEventList+0x15a>
    1926:	4e eb       	ldi	r20, 0xBE	; 190
    1928:	53 e0       	ldi	r21, 0x03	; 3
    192a:	da 01       	movw	r26, r20
    192c:	11 96       	adiw	r26, 0x01	; 1
    192e:	cd 91       	ld	r28, X+
    1930:	dc 91       	ld	r29, X
    1932:	12 97       	sbiw	r26, 0x02	; 2
    1934:	d7 87       	std	Z+15, r29	; 0x0f
    1936:	c6 87       	std	Z+14, r28	; 0x0e
    1938:	8c 81       	ldd	r24, Y+4	; 0x04
    193a:	9d 81       	ldd	r25, Y+5	; 0x05
    193c:	91 8b       	std	Z+17, r25	; 0x11
    193e:	80 8b       	std	Z+16, r24	; 0x10
    1940:	8c 81       	ldd	r24, Y+4	; 0x04
    1942:	9d 81       	ldd	r25, Y+5	; 0x05
    1944:	dc 01       	movw	r26, r24
    1946:	13 96       	adiw	r26, 0x03	; 3
    1948:	3c 93       	st	X, r19
    194a:	2e 93       	st	-X, r18
    194c:	12 97       	sbiw	r26, 0x02	; 2
    194e:	3d 83       	std	Y+5, r19	; 0x05
    1950:	2c 83       	std	Y+4, r18	; 0x04
    1952:	55 8b       	std	Z+21, r21	; 0x15
    1954:	44 8b       	std	Z+20, r20	; 0x14
    1956:	da 01       	movw	r26, r20
    1958:	8c 91       	ld	r24, X
    195a:	8f 5f       	subi	r24, 0xFF	; 255
    195c:	8c 93       	st	X, r24
    195e:	96 89       	ldd	r25, Z+22	; 0x16
    1960:	e0 91 01 04 	lds	r30, 0x0401	; 0x800401 <pxCurrentTCB>
    1964:	f0 91 02 04 	lds	r31, 0x0402	; 0x800402 <pxCurrentTCB+0x1>
    1968:	86 89       	ldd	r24, Z+22	; 0x16
    196a:	89 17       	cp	r24, r25
    196c:	20 f4       	brcc	.+8      	; 0x1976 <xTaskRemoveFromEventList+0x172>
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <xYieldPending>
    1974:	01 c0       	rjmp	.+2      	; 0x1978 <xTaskRemoveFromEventList+0x174>
    1976:	80 e0       	ldi	r24, 0x00	; 0
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <vTaskInternalSetTimeOutState>:
    197e:	20 91 a2 03 	lds	r18, 0x03A2	; 0x8003a2 <xNumOfOverflows>
    1982:	fc 01       	movw	r30, r24
    1984:	20 83       	st	Z, r18
    1986:	20 91 a8 03 	lds	r18, 0x03A8	; 0x8003a8 <xTickCount>
    198a:	30 91 a9 03 	lds	r19, 0x03A9	; 0x8003a9 <xTickCount+0x1>
    198e:	32 83       	std	Z+2, r19	; 0x02
    1990:	21 83       	std	Z+1, r18	; 0x01
    1992:	08 95       	ret

00001994 <xTaskCheckForTimeOut>:
    1994:	1f 93       	push	r17
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	0f b6       	in	r0, 0x3f	; 63
    199c:	f8 94       	cli
    199e:	0f 92       	push	r0
    19a0:	e0 91 a8 03 	lds	r30, 0x03A8	; 0x8003a8 <xTickCount>
    19a4:	f0 91 a9 03 	lds	r31, 0x03A9	; 0x8003a9 <xTickCount+0x1>
    19a8:	dc 01       	movw	r26, r24
    19aa:	11 96       	adiw	r26, 0x01	; 1
    19ac:	4d 91       	ld	r20, X+
    19ae:	5c 91       	ld	r21, X
    19b0:	12 97       	sbiw	r26, 0x02	; 2
    19b2:	df 01       	movw	r26, r30
    19b4:	a4 1b       	sub	r26, r20
    19b6:	b5 0b       	sbc	r27, r21
    19b8:	eb 01       	movw	r28, r22
    19ba:	28 81       	ld	r18, Y
    19bc:	39 81       	ldd	r19, Y+1	; 0x01
    19be:	2f 3f       	cpi	r18, 0xFF	; 255
    19c0:	df ef       	ldi	r29, 0xFF	; 255
    19c2:	3d 07       	cpc	r19, r29
    19c4:	f9 f0       	breq	.+62     	; 0x1a04 <xTaskCheckForTimeOut+0x70>
    19c6:	ec 01       	movw	r28, r24
    19c8:	18 81       	ld	r17, Y
    19ca:	c0 91 a2 03 	lds	r28, 0x03A2	; 0x8003a2 <xNumOfOverflows>
    19ce:	1c 17       	cp	r17, r28
    19d0:	41 f0       	breq	.+16     	; 0x19e2 <xTaskCheckForTimeOut+0x4e>
    19d2:	e4 17       	cp	r30, r20
    19d4:	f5 07       	cpc	r31, r21
    19d6:	28 f0       	brcs	.+10     	; 0x19e2 <xTaskCheckForTimeOut+0x4e>
    19d8:	fb 01       	movw	r30, r22
    19da:	11 82       	std	Z+1, r1	; 0x01
    19dc:	10 82       	st	Z, r1
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	12 c0       	rjmp	.+36     	; 0x1a06 <xTaskCheckForTimeOut+0x72>
    19e2:	a2 17       	cp	r26, r18
    19e4:	b3 07       	cpc	r27, r19
    19e6:	48 f4       	brcc	.+18     	; 0x19fa <xTaskCheckForTimeOut+0x66>
    19e8:	fb 01       	movw	r30, r22
    19ea:	2a 1b       	sub	r18, r26
    19ec:	3b 0b       	sbc	r19, r27
    19ee:	31 83       	std	Z+1, r19	; 0x01
    19f0:	20 83       	st	Z, r18
    19f2:	0e 94 bf 0c 	call	0x197e	; 0x197e <vTaskInternalSetTimeOutState>
    19f6:	80 e0       	ldi	r24, 0x00	; 0
    19f8:	06 c0       	rjmp	.+12     	; 0x1a06 <xTaskCheckForTimeOut+0x72>
    19fa:	db 01       	movw	r26, r22
    19fc:	1d 92       	st	X+, r1
    19fe:	1c 92       	st	X, r1
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <xTaskCheckForTimeOut+0x72>
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	0f 90       	pop	r0
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	df 91       	pop	r29
    1a0c:	cf 91       	pop	r28
    1a0e:	1f 91       	pop	r17
    1a10:	08 95       	ret

00001a12 <vTaskMissedYield>:
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	80 93 a3 03 	sts	0x03A3, r24	; 0x8003a3 <xYieldPending>
    1a18:	08 95       	ret

00001a1a <xTaskGetSchedulerState>:

    BaseType_t xTaskGetSchedulerState( void )
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
    1a1a:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <xSchedulerRunning>
    1a1e:	88 23       	and	r24, r24
    1a20:	31 f0       	breq	.+12     	; 0x1a2e <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
    1a22:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <uxSchedulerSuspended>
    1a26:	81 11       	cpse	r24, r1
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <xTaskGetSchedulerState+0x18>
            {
                xReturn = taskSCHEDULER_RUNNING;
    1a2a:	82 e0       	ldi	r24, 0x02	; 2
    1a2c:	08 95       	ret
    {
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
    1a2e:	81 e0       	ldi	r24, 0x01	; 1
    1a30:	08 95       	ret
            {
                xReturn = taskSCHEDULER_RUNNING;
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
    1a32:	80 e0       	ldi	r24, 0x00	; 0
            }
        }

        return xReturn;
    }
    1a34:	08 95       	ret

00001a36 <prvGetNextExpireTime>:
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
    1a36:	dc 01       	movw	r26, r24
    1a38:	e0 91 0b 04 	lds	r30, 0x040B	; 0x80040b <pxCurrentTimerList>
    1a3c:	f0 91 0c 04 	lds	r31, 0x040C	; 0x80040c <pxCurrentTimerList+0x1>
    1a40:	80 81       	ld	r24, Z
    1a42:	91 e0       	ldi	r25, 0x01	; 1
    1a44:	81 11       	cpse	r24, r1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9c 93       	st	X, r25
    1a4a:	91 11       	cpse	r25, r1
    1a4c:	06 c0       	rjmp	.+12     	; 0x1a5a <prvGetNextExpireTime+0x24>
    1a4e:	05 80       	ldd	r0, Z+5	; 0x05
    1a50:	f6 81       	ldd	r31, Z+6	; 0x06
    1a52:	e0 2d       	mov	r30, r0
    1a54:	80 81       	ld	r24, Z
    1a56:	91 81       	ldd	r25, Z+1	; 0x01
    1a58:	08 95       	ret
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	08 95       	ret

00001a60 <prvInsertTimerInActiveList>:
    1a60:	fc 01       	movw	r30, r24
    1a62:	73 83       	std	Z+3, r23	; 0x03
    1a64:	62 83       	std	Z+2, r22	; 0x02
    1a66:	91 87       	std	Z+9, r25	; 0x09
    1a68:	80 87       	std	Z+8, r24	; 0x08
    1a6a:	46 17       	cp	r20, r22
    1a6c:	57 07       	cpc	r21, r23
    1a6e:	90 f0       	brcs	.+36     	; 0x1a94 <prvInsertTimerInActiveList+0x34>
    1a70:	42 1b       	sub	r20, r18
    1a72:	53 0b       	sbc	r21, r19
    1a74:	84 85       	ldd	r24, Z+12	; 0x0c
    1a76:	95 85       	ldd	r25, Z+13	; 0x0d
    1a78:	48 17       	cp	r20, r24
    1a7a:	59 07       	cpc	r21, r25
    1a7c:	e0 f4       	brcc	.+56     	; 0x1ab6 <prvInsertTimerInActiveList+0x56>
    1a7e:	bf 01       	movw	r22, r30
    1a80:	6e 5f       	subi	r22, 0xFE	; 254
    1a82:	7f 4f       	sbci	r23, 0xFF	; 255
    1a84:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <pxOverflowTimerList>
    1a88:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <pxOverflowTimerList+0x1>
    1a8c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	08 95       	ret
    1a94:	42 17       	cp	r20, r18
    1a96:	53 07       	cpc	r21, r19
    1a98:	18 f4       	brcc	.+6      	; 0x1aa0 <prvInsertTimerInActiveList+0x40>
    1a9a:	62 17       	cp	r22, r18
    1a9c:	73 07       	cpc	r23, r19
    1a9e:	68 f4       	brcc	.+26     	; 0x1aba <prvInsertTimerInActiveList+0x5a>
    1aa0:	bf 01       	movw	r22, r30
    1aa2:	6e 5f       	subi	r22, 0xFE	; 254
    1aa4:	7f 4f       	sbci	r23, 0xFF	; 255
    1aa6:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <pxCurrentTimerList>
    1aaa:	90 91 0c 04 	lds	r25, 0x040C	; 0x80040c <pxCurrentTimerList+0x1>
    1aae:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <vListInsert>
    1ab2:	80 e0       	ldi	r24, 0x00	; 0
    1ab4:	08 95       	ret
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	08 95       	ret
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	08 95       	ret

00001abe <prvReloadTimer>:
    1abe:	ef 92       	push	r14
    1ac0:	ff 92       	push	r15
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	ec 01       	movw	r28, r24
    1acc:	8b 01       	movw	r16, r22
    1ace:	7a 01       	movw	r14, r20
    1ad0:	08 c0       	rjmp	.+16     	; 0x1ae2 <prvReloadTimer+0x24>
    1ad2:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ad4:	9d 85       	ldd	r25, Y+13	; 0x0d
    1ad6:	08 0f       	add	r16, r24
    1ad8:	19 1f       	adc	r17, r25
    1ada:	e8 89       	ldd	r30, Y+16	; 0x10
    1adc:	f9 89       	ldd	r31, Y+17	; 0x11
    1ade:	ce 01       	movw	r24, r28
    1ae0:	09 95       	icall
    1ae2:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ae4:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ae6:	60 0f       	add	r22, r16
    1ae8:	71 1f       	adc	r23, r17
    1aea:	98 01       	movw	r18, r16
    1aec:	a7 01       	movw	r20, r14
    1aee:	ce 01       	movw	r24, r28
    1af0:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <prvInsertTimerInActiveList>
    1af4:	81 11       	cpse	r24, r1
    1af6:	ed cf       	rjmp	.-38     	; 0x1ad2 <prvReloadTimer+0x14>
    1af8:	df 91       	pop	r29
    1afa:	cf 91       	pop	r28
    1afc:	1f 91       	pop	r17
    1afe:	0f 91       	pop	r16
    1b00:	ff 90       	pop	r15
    1b02:	ef 90       	pop	r14
    1b04:	08 95       	ret

00001b06 <prvProcessExpiredTimer>:
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	8c 01       	movw	r16, r24
    1b14:	7b 01       	movw	r14, r22
    1b16:	e0 91 0b 04 	lds	r30, 0x040B	; 0x80040b <pxCurrentTimerList>
    1b1a:	f0 91 0c 04 	lds	r31, 0x040C	; 0x80040c <pxCurrentTimerList+0x1>
    1b1e:	05 80       	ldd	r0, Z+5	; 0x05
    1b20:	f6 81       	ldd	r31, Z+6	; 0x06
    1b22:	e0 2d       	mov	r30, r0
    1b24:	c6 81       	ldd	r28, Z+6	; 0x06
    1b26:	d7 81       	ldd	r29, Z+7	; 0x07
    1b28:	ce 01       	movw	r24, r28
    1b2a:	02 96       	adiw	r24, 0x02	; 2
    1b2c:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>
    1b30:	8a 89       	ldd	r24, Y+18	; 0x12
    1b32:	82 ff       	sbrs	r24, 2
    1b34:	06 c0       	rjmp	.+12     	; 0x1b42 <prvProcessExpiredTimer+0x3c>
    1b36:	a7 01       	movw	r20, r14
    1b38:	b8 01       	movw	r22, r16
    1b3a:	ce 01       	movw	r24, r28
    1b3c:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <prvReloadTimer>
    1b40:	02 c0       	rjmp	.+4      	; 0x1b46 <prvProcessExpiredTimer+0x40>
    1b42:	8e 7f       	andi	r24, 0xFE	; 254
    1b44:	8a 8b       	std	Y+18, r24	; 0x12
    1b46:	e8 89       	ldd	r30, Y+16	; 0x10
    1b48:	f9 89       	ldd	r31, Y+17	; 0x11
    1b4a:	ce 01       	movw	r24, r28
    1b4c:	09 95       	icall
    1b4e:	df 91       	pop	r29
    1b50:	cf 91       	pop	r28
    1b52:	1f 91       	pop	r17
    1b54:	0f 91       	pop	r16
    1b56:	ff 90       	pop	r15
    1b58:	ef 90       	pop	r14
    1b5a:	08 95       	ret

00001b5c <prvSwitchTimerLists>:
    1b5c:	09 c0       	rjmp	.+18     	; 0x1b70 <prvSwitchTimerLists+0x14>
    1b5e:	05 80       	ldd	r0, Z+5	; 0x05
    1b60:	f6 81       	ldd	r31, Z+6	; 0x06
    1b62:	e0 2d       	mov	r30, r0
    1b64:	6f ef       	ldi	r22, 0xFF	; 255
    1b66:	7f ef       	ldi	r23, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <prvProcessExpiredTimer>
    1b70:	e0 91 0b 04 	lds	r30, 0x040B	; 0x80040b <pxCurrentTimerList>
    1b74:	f0 91 0c 04 	lds	r31, 0x040C	; 0x80040c <pxCurrentTimerList+0x1>
    1b78:	80 81       	ld	r24, Z
    1b7a:	81 11       	cpse	r24, r1
    1b7c:	f0 cf       	rjmp	.-32     	; 0x1b5e <prvSwitchTimerLists+0x2>
    1b7e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <pxOverflowTimerList>
    1b82:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <pxOverflowTimerList+0x1>
    1b86:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <pxCurrentTimerList+0x1>
    1b8a:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <pxCurrentTimerList>
    1b8e:	f0 93 0a 04 	sts	0x040A, r31	; 0x80040a <pxOverflowTimerList+0x1>
    1b92:	e0 93 09 04 	sts	0x0409, r30	; 0x800409 <pxOverflowTimerList>
    1b96:	08 95       	ret

00001b98 <prvSampleTimeNow>:
    1b98:	0f 93       	push	r16
    1b9a:	1f 93       	push	r17
    1b9c:	cf 93       	push	r28
    1b9e:	df 93       	push	r29
    1ba0:	8c 01       	movw	r16, r24
    1ba2:	0e 94 57 09 	call	0x12ae	; 0x12ae <xTaskGetTickCount>
    1ba6:	ec 01       	movw	r28, r24
    1ba8:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <xLastTime.2428>
    1bac:	90 91 04 04 	lds	r25, 0x0404	; 0x800404 <xLastTime.2428+0x1>
    1bb0:	c8 17       	cp	r28, r24
    1bb2:	d9 07       	cpc	r29, r25
    1bb4:	30 f4       	brcc	.+12     	; 0x1bc2 <prvSampleTimeNow+0x2a>
    1bb6:	0e 94 ae 0d 	call	0x1b5c	; 0x1b5c <prvSwitchTimerLists>
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	f8 01       	movw	r30, r16
    1bbe:	80 83       	st	Z, r24
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <prvSampleTimeNow+0x2e>
    1bc2:	f8 01       	movw	r30, r16
    1bc4:	10 82       	st	Z, r1
    1bc6:	d0 93 04 04 	sts	0x0404, r29	; 0x800404 <xLastTime.2428+0x1>
    1bca:	c0 93 03 04 	sts	0x0403, r28	; 0x800403 <xLastTime.2428>
    1bce:	ce 01       	movw	r24, r28
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	0f 91       	pop	r16
    1bd8:	08 95       	ret

00001bda <prvProcessTimerOrBlockTask>:
    1bda:	cf 92       	push	r12
    1bdc:	df 92       	push	r13
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	1f 92       	push	r1
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	7c 01       	movw	r14, r24
    1bf0:	16 2f       	mov	r17, r22
    1bf2:	0e 94 51 09 	call	0x12a2	; 0x12a2 <vTaskSuspendAll>
    1bf6:	ce 01       	movw	r24, r28
    1bf8:	01 96       	adiw	r24, 0x01	; 1
    1bfa:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <prvSampleTimeNow>
    1bfe:	6c 01       	movw	r12, r24
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	81 11       	cpse	r24, r1
    1c04:	27 c0       	rjmp	.+78     	; 0x1c54 <prvProcessTimerOrBlockTask+0x7a>
    1c06:	11 11       	cpse	r17, r1
    1c08:	0a c0       	rjmp	.+20     	; 0x1c1e <prvProcessTimerOrBlockTask+0x44>
    1c0a:	ce 14       	cp	r12, r14
    1c0c:	df 04       	cpc	r13, r15
    1c0e:	38 f0       	brcs	.+14     	; 0x1c1e <prvProcessTimerOrBlockTask+0x44>
    1c10:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
    1c14:	b6 01       	movw	r22, r12
    1c16:	c7 01       	movw	r24, r14
    1c18:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <prvProcessExpiredTimer>
    1c1c:	1d c0       	rjmp	.+58     	; 0x1c58 <prvProcessTimerOrBlockTask+0x7e>
    1c1e:	11 23       	and	r17, r17
    1c20:	41 f0       	breq	.+16     	; 0x1c32 <prvProcessTimerOrBlockTask+0x58>
    1c22:	e0 91 09 04 	lds	r30, 0x0409	; 0x800409 <pxOverflowTimerList>
    1c26:	f0 91 0a 04 	lds	r31, 0x040A	; 0x80040a <pxOverflowTimerList+0x1>
    1c2a:	80 81       	ld	r24, Z
    1c2c:	11 e0       	ldi	r17, 0x01	; 1
    1c2e:	81 11       	cpse	r24, r1
    1c30:	10 e0       	ldi	r17, 0x00	; 0
    1c32:	b7 01       	movw	r22, r14
    1c34:	6c 19       	sub	r22, r12
    1c36:	7d 09       	sbc	r23, r13
    1c38:	41 2f       	mov	r20, r17
    1c3a:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <xTimerQueue>
    1c3e:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <xTimerQueue+0x1>
    1c42:	0e 94 a2 06 	call	0xd44	; 0xd44 <vQueueWaitForMessageRestricted>
    1c46:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
    1c4a:	81 11       	cpse	r24, r1
    1c4c:	05 c0       	rjmp	.+10     	; 0x1c58 <prvProcessTimerOrBlockTask+0x7e>
    1c4e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <vPortYield>
    1c52:	02 c0       	rjmp	.+4      	; 0x1c58 <prvProcessTimerOrBlockTask+0x7e>
    1c54:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <xTaskResumeAll>
    1c58:	0f 90       	pop	r0
    1c5a:	df 91       	pop	r29
    1c5c:	cf 91       	pop	r28
    1c5e:	1f 91       	pop	r17
    1c60:	ff 90       	pop	r15
    1c62:	ef 90       	pop	r14
    1c64:	df 90       	pop	r13
    1c66:	cf 90       	pop	r12
    1c68:	08 95       	ret

00001c6a <prvProcessReceivedCommands>:
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <prvProcessReceivedCommands+0xe>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <prvProcessReceivedCommands+0x10>
    1c7a:	00 d0       	rcall	.+0      	; 0x1c7c <prvProcessReceivedCommands+0x12>
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	7a c0       	rjmp	.+244    	; 0x1d76 <prvProcessReceivedCommands+0x10c>
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	88 23       	and	r24, r24
    1c86:	0c f4       	brge	.+2      	; 0x1c8a <prvProcessReceivedCommands+0x20>
    1c88:	76 c0       	rjmp	.+236    	; 0x1d76 <prvProcessReceivedCommands+0x10c>
    1c8a:	0c 81       	ldd	r16, Y+4	; 0x04
    1c8c:	1d 81       	ldd	r17, Y+5	; 0x05
    1c8e:	d8 01       	movw	r26, r16
    1c90:	1a 96       	adiw	r26, 0x0a	; 10
    1c92:	8d 91       	ld	r24, X+
    1c94:	9c 91       	ld	r25, X
    1c96:	1b 97       	sbiw	r26, 0x0b	; 11
    1c98:	89 2b       	or	r24, r25
    1c9a:	21 f0       	breq	.+8      	; 0x1ca4 <prvProcessReceivedCommands+0x3a>
    1c9c:	c8 01       	movw	r24, r16
    1c9e:	02 96       	adiw	r24, 0x02	; 2
    1ca0:	0e 94 1a 01 	call	0x234	; 0x234 <uxListRemove>
    1ca4:	ce 01       	movw	r24, r28
    1ca6:	06 96       	adiw	r24, 0x06	; 6
    1ca8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <prvSampleTimeNow>
    1cac:	7c 01       	movw	r14, r24
    1cae:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb0:	8e 2f       	mov	r24, r30
    1cb2:	ee 0f       	add	r30, r30
    1cb4:	99 0b       	sbc	r25, r25
    1cb6:	aa 0b       	sbc	r26, r26
    1cb8:	bb 0b       	sbc	r27, r27
    1cba:	fc 01       	movw	r30, r24
    1cbc:	31 97       	sbiw	r30, 0x01	; 1
    1cbe:	e9 30       	cpi	r30, 0x09	; 9
    1cc0:	f1 05       	cpc	r31, r1
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <prvProcessReceivedCommands+0x5c>
    1cc4:	58 c0       	rjmp	.+176    	; 0x1d76 <prvProcessReceivedCommands+0x10c>
    1cc6:	e6 5d       	subi	r30, 0xD6	; 214
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	0c 94 35 10 	jmp	0x206a	; 0x206a <__tablejump2__>
    1cce:	f8 01       	movw	r30, r16
    1cd0:	82 89       	ldd	r24, Z+18	; 0x12
    1cd2:	81 60       	ori	r24, 0x01	; 1
    1cd4:	82 8b       	std	Z+18, r24	; 0x12
    1cd6:	2a 81       	ldd	r18, Y+2	; 0x02
    1cd8:	3b 81       	ldd	r19, Y+3	; 0x03
    1cda:	64 85       	ldd	r22, Z+12	; 0x0c
    1cdc:	75 85       	ldd	r23, Z+13	; 0x0d
    1cde:	62 0f       	add	r22, r18
    1ce0:	73 1f       	adc	r23, r19
    1ce2:	a7 01       	movw	r20, r14
    1ce4:	c8 01       	movw	r24, r16
    1ce6:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <prvInsertTimerInActiveList>
    1cea:	88 23       	and	r24, r24
    1cec:	09 f4       	brne	.+2      	; 0x1cf0 <prvProcessReceivedCommands+0x86>
    1cee:	43 c0       	rjmp	.+134    	; 0x1d76 <prvProcessReceivedCommands+0x10c>
    1cf0:	d8 01       	movw	r26, r16
    1cf2:	52 96       	adiw	r26, 0x12	; 18
    1cf4:	8c 91       	ld	r24, X
    1cf6:	52 97       	sbiw	r26, 0x12	; 18
    1cf8:	82 ff       	sbrs	r24, 2
    1cfa:	0d c0       	rjmp	.+26     	; 0x1d16 <prvProcessReceivedCommands+0xac>
    1cfc:	6a 81       	ldd	r22, Y+2	; 0x02
    1cfe:	7b 81       	ldd	r23, Y+3	; 0x03
    1d00:	1c 96       	adiw	r26, 0x0c	; 12
    1d02:	8d 91       	ld	r24, X+
    1d04:	9c 91       	ld	r25, X
    1d06:	1d 97       	sbiw	r26, 0x0d	; 13
    1d08:	68 0f       	add	r22, r24
    1d0a:	79 1f       	adc	r23, r25
    1d0c:	a7 01       	movw	r20, r14
    1d0e:	c8 01       	movw	r24, r16
    1d10:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <prvReloadTimer>
    1d14:	03 c0       	rjmp	.+6      	; 0x1d1c <prvProcessReceivedCommands+0xb2>
    1d16:	8e 7f       	andi	r24, 0xFE	; 254
    1d18:	f8 01       	movw	r30, r16
    1d1a:	82 8b       	std	Z+18, r24	; 0x12
    1d1c:	d8 01       	movw	r26, r16
    1d1e:	50 96       	adiw	r26, 0x10	; 16
    1d20:	ed 91       	ld	r30, X+
    1d22:	fc 91       	ld	r31, X
    1d24:	51 97       	sbiw	r26, 0x11	; 17
    1d26:	c8 01       	movw	r24, r16
    1d28:	09 95       	icall
    1d2a:	25 c0       	rjmp	.+74     	; 0x1d76 <prvProcessReceivedCommands+0x10c>
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	82 89       	ldd	r24, Z+18	; 0x12
    1d30:	8e 7f       	andi	r24, 0xFE	; 254
    1d32:	82 8b       	std	Z+18, r24	; 0x12
    1d34:	20 c0       	rjmp	.+64     	; 0x1d76 <prvProcessReceivedCommands+0x10c>
    1d36:	d8 01       	movw	r26, r16
    1d38:	52 96       	adiw	r26, 0x12	; 18
    1d3a:	8c 91       	ld	r24, X
    1d3c:	52 97       	sbiw	r26, 0x12	; 18
    1d3e:	81 60       	ori	r24, 0x01	; 1
    1d40:	52 96       	adiw	r26, 0x12	; 18
    1d42:	8c 93       	st	X, r24
    1d44:	52 97       	sbiw	r26, 0x12	; 18
    1d46:	6a 81       	ldd	r22, Y+2	; 0x02
    1d48:	7b 81       	ldd	r23, Y+3	; 0x03
    1d4a:	1d 96       	adiw	r26, 0x0d	; 13
    1d4c:	7c 93       	st	X, r23
    1d4e:	6e 93       	st	-X, r22
    1d50:	1c 97       	sbiw	r26, 0x0c	; 12
    1d52:	6e 0d       	add	r22, r14
    1d54:	7f 1d       	adc	r23, r15
    1d56:	97 01       	movw	r18, r14
    1d58:	a7 01       	movw	r20, r14
    1d5a:	c8 01       	movw	r24, r16
    1d5c:	0e 94 30 0d 	call	0x1a60	; 0x1a60 <prvInsertTimerInActiveList>
    1d60:	0a c0       	rjmp	.+20     	; 0x1d76 <prvProcessReceivedCommands+0x10c>
    1d62:	f8 01       	movw	r30, r16
    1d64:	82 89       	ldd	r24, Z+18	; 0x12
    1d66:	81 fd       	sbrc	r24, 1
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <prvProcessReceivedCommands+0x108>
    1d6a:	c8 01       	movw	r24, r16
    1d6c:	0e 94 a5 03 	call	0x74a	; 0x74a <vPortFree>
    1d70:	02 c0       	rjmp	.+4      	; 0x1d76 <prvProcessReceivedCommands+0x10c>
    1d72:	8e 7f       	andi	r24, 0xFE	; 254
    1d74:	82 8b       	std	Z+18, r24	; 0x12
    1d76:	40 e0       	ldi	r20, 0x00	; 0
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	be 01       	movw	r22, r28
    1d7c:	6f 5f       	subi	r22, 0xFF	; 255
    1d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d80:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <xTimerQueue>
    1d84:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <xTimerQueue+0x1>
    1d88:	0e 94 13 06 	call	0xc26	; 0xc26 <xQueueReceive>
    1d8c:	81 11       	cpse	r24, r1
    1d8e:	79 cf       	rjmp	.-270    	; 0x1c82 <prvProcessReceivedCommands+0x18>
    1d90:	26 96       	adiw	r28, 0x06	; 6
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	08 95       	ret

00001daa <prvTimerTask>:
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	1f 92       	push	r1
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	ce 01       	movw	r24, r28
    1db6:	01 96       	adiw	r24, 0x01	; 1
    1db8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <prvGetNextExpireTime>
    1dbc:	69 81       	ldd	r22, Y+1	; 0x01
    1dbe:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <prvProcessTimerOrBlockTask>
    1dc2:	0e 94 35 0e 	call	0x1c6a	; 0x1c6a <prvProcessReceivedCommands>
    1dc6:	f6 cf       	rjmp	.-20     	; 0x1db4 <prvTimerTask+0xa>

00001dc8 <prvCheckForValidListAndQueue>:
    1dc8:	0f b6       	in	r0, 0x3f	; 63
    1dca:	f8 94       	cli
    1dcc:	0f 92       	push	r0
    1dce:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <xTimerQueue>
    1dd2:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <xTimerQueue+0x1>
    1dd6:	89 2b       	or	r24, r25
    1dd8:	e9 f4       	brne	.+58     	; 0x1e14 <prvCheckForValidListAndQueue+0x4c>
    1dda:	86 e1       	ldi	r24, 0x16	; 22
    1ddc:	94 e0       	ldi	r25, 0x04	; 4
    1dde:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
    1de2:	8d e0       	ldi	r24, 0x0D	; 13
    1de4:	94 e0       	ldi	r25, 0x04	; 4
    1de6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <vListInitialise>
    1dea:	86 e1       	ldi	r24, 0x16	; 22
    1dec:	94 e0       	ldi	r25, 0x04	; 4
    1dee:	90 93 0c 04 	sts	0x040C, r25	; 0x80040c <pxCurrentTimerList+0x1>
    1df2:	80 93 0b 04 	sts	0x040B, r24	; 0x80040b <pxCurrentTimerList>
    1df6:	8d e0       	ldi	r24, 0x0D	; 13
    1df8:	94 e0       	ldi	r25, 0x04	; 4
    1dfa:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <pxOverflowTimerList+0x1>
    1dfe:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <pxOverflowTimerList>
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	65 e0       	ldi	r22, 0x05	; 5
    1e06:	84 e0       	ldi	r24, 0x04	; 4
    1e08:	0e 94 fe 04 	call	0x9fc	; 0x9fc <xQueueGenericCreate>
    1e0c:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <xTimerQueue+0x1>
    1e10:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <xTimerQueue>
    1e14:	0f 90       	pop	r0
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	08 95       	ret

00001e1a <xTimerCreateTimerTask>:
    1e1a:	ef 92       	push	r14
    1e1c:	ff 92       	push	r15
    1e1e:	0f 93       	push	r16
    1e20:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <prvCheckForValidListAndQueue>
    1e24:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <xTimerQueue>
    1e28:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <xTimerQueue+0x1>
    1e2c:	89 2b       	or	r24, r25
    1e2e:	91 f0       	breq	.+36     	; 0x1e54 <xTimerCreateTimerTask+0x3a>
    1e30:	0f 2e       	mov	r0, r31
    1e32:	f5 e0       	ldi	r31, 0x05	; 5
    1e34:	ef 2e       	mov	r14, r31
    1e36:	f4 e0       	ldi	r31, 0x04	; 4
    1e38:	ff 2e       	mov	r15, r31
    1e3a:	f0 2d       	mov	r31, r0
    1e3c:	04 e0       	ldi	r16, 0x04	; 4
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	46 e9       	ldi	r20, 0x96	; 150
    1e44:	50 e0       	ldi	r21, 0x00	; 0
    1e46:	66 e6       	ldi	r22, 0x66	; 102
    1e48:	70 e0       	ldi	r23, 0x00	; 0
    1e4a:	85 ed       	ldi	r24, 0xD5	; 213
    1e4c:	9e e0       	ldi	r25, 0x0E	; 14
    1e4e:	0e 94 c8 08 	call	0x1190	; 0x1190 <xTaskCreate>
    1e52:	01 c0       	rjmp	.+2      	; 0x1e56 <xTimerCreateTimerTask+0x3c>
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	0f 91       	pop	r16
    1e58:	ff 90       	pop	r15
    1e5a:	ef 90       	pop	r14
    1e5c:	08 95       	ret

00001e5e <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <xTimerGenericCommand+0xa>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <xTimerGenericCommand+0xc>
    1e6a:	1f 92       	push	r1
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    1e70:	e0 91 07 04 	lds	r30, 0x0407	; 0x800407 <xTimerQueue>
    1e74:	f0 91 08 04 	lds	r31, 0x0408	; 0x800408 <xTimerQueue+0x1>
    1e78:	30 97       	sbiw	r30, 0x00	; 0
    1e7a:	71 f1       	breq	.+92     	; 0x1ed8 <xTimerGenericCommand+0x7a>
    1e7c:	d9 01       	movw	r26, r18
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    1e7e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    1e80:	5b 83       	std	Y+3, r21	; 0x03
    1e82:	4a 83       	std	Y+2, r20	; 0x02
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    1e84:	9d 83       	std	Y+5, r25	; 0x05
    1e86:	8c 83       	std	Y+4, r24	; 0x04

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    1e88:	66 30       	cpi	r22, 0x06	; 6
    1e8a:	ec f4       	brge	.+58     	; 0x1ec6 <xTimerGenericCommand+0x68>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    1e8c:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <xTaskGetSchedulerState>
    1e90:	82 30       	cpi	r24, 0x02	; 2
    1e92:	61 f4       	brne	.+24     	; 0x1eac <xTimerGenericCommand+0x4e>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    1e94:	20 e0       	ldi	r18, 0x00	; 0
    1e96:	a8 01       	movw	r20, r16
    1e98:	be 01       	movw	r22, r28
    1e9a:	6f 5f       	subi	r22, 0xFF	; 255
    1e9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9e:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <xTimerQueue>
    1ea2:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <xTimerQueue+0x1>
    1ea6:	0e 94 3f 05 	call	0xa7e	; 0xa7e <xQueueGenericSend>
    1eaa:	17 c0       	rjmp	.+46     	; 0x1eda <xTimerGenericCommand+0x7c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	40 e0       	ldi	r20, 0x00	; 0
    1eb0:	50 e0       	ldi	r21, 0x00	; 0
    1eb2:	be 01       	movw	r22, r28
    1eb4:	6f 5f       	subi	r22, 0xFF	; 255
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <xTimerQueue>
    1ebc:	90 91 08 04 	lds	r25, 0x0408	; 0x800408 <xTimerQueue+0x1>
    1ec0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <xQueueGenericSend>
    1ec4:	0a c0       	rjmp	.+20     	; 0x1eda <xTimerGenericCommand+0x7c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	ad 01       	movw	r20, r26
    1eca:	be 01       	movw	r22, r28
    1ecc:	6f 5f       	subi	r22, 0xFF	; 255
    1ece:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed0:	cf 01       	movw	r24, r30
    1ed2:	0e 94 d1 05 	call	0xba2	; 0xba2 <xQueueGenericSendFromISR>
    1ed6:	01 c0       	rjmp	.+2      	; 0x1eda <xTimerGenericCommand+0x7c>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    1ed8:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	0f 90       	pop	r0
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	08 95       	ret

00001eee <KEYPAD_Init>:
#include "KEYPAD.h"


void KEYPAD_Init(void)
{
	DIO_WritePin(FIRST_OUTPUT,HIGH);
    1eee:	61 e0       	ldi	r22, 0x01	; 1
    1ef0:	8c e0       	ldi	r24, 0x0C	; 12
    1ef2:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(FIRST_OUTPUT+1,HIGH);
    1ef6:	61 e0       	ldi	r22, 0x01	; 1
    1ef8:	8d e0       	ldi	r24, 0x0D	; 13
    1efa:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(FIRST_OUTPUT+2,HIGH);
    1efe:	61 e0       	ldi	r22, 0x01	; 1
    1f00:	8e e0       	ldi	r24, 0x0E	; 14
    1f02:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(FIRST_OUTPUT+3,HIGH);
    1f06:	61 e0       	ldi	r22, 0x01	; 1
    1f08:	8f e0       	ldi	r24, 0x0F	; 15
    1f0a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
    1f0e:	08 95       	ret

00001f10 <WriteInstruction>:
#elif LCD_MODE==_4_BIT



 void WriteInstruction(u8 ins) //write number on lcd port
{
    1f10:	cf 93       	push	r28
    1f12:	c8 2f       	mov	r28, r24
	DIO_WritePin(RS,LOW);
    1f14:	60 e0       	ldi	r22, 0x00	; 0
    1f16:	83 e1       	ldi	r24, 0x13	; 19
    1f18:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	/*****High data ****/
	DIO_WritePin(D7,READ_BIT(ins,7));
    1f1c:	6c 2f       	mov	r22, r28
    1f1e:	66 1f       	adc	r22, r22
    1f20:	66 27       	eor	r22, r22
    1f22:	66 1f       	adc	r22, r22
    1f24:	87 e1       	ldi	r24, 0x17	; 23
    1f26:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,6));
    1f2a:	c6 fb       	bst	r28, 6
    1f2c:	66 27       	eor	r22, r22
    1f2e:	60 f9       	bld	r22, 0
    1f30:	86 e1       	ldi	r24, 0x16	; 22
    1f32:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,5));
    1f36:	c5 fb       	bst	r28, 5
    1f38:	66 27       	eor	r22, r22
    1f3a:	60 f9       	bld	r22, 0
    1f3c:	85 e1       	ldi	r24, 0x15	; 21
    1f3e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,4));
    1f42:	c4 fb       	bst	r28, 4
    1f44:	66 27       	eor	r22, r22
    1f46:	60 f9       	bld	r22, 0
    1f48:	84 e1       	ldi	r24, 0x14	; 20
    1f4a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(EN,HIGH); // trigger
    1f4e:	61 e0       	ldi	r22, 0x01	; 1
    1f50:	82 e1       	ldi	r24, 0x12	; 18
    1f52:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1f56:	8f ec       	ldi	r24, 0xCF	; 207
    1f58:	97 e0       	ldi	r25, 0x07	; 7
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	f1 f7       	brne	.-4      	; 0x1f5a <WriteInstruction+0x4a>
    1f5e:	00 c0       	rjmp	.+0      	; 0x1f60 <WriteInstruction+0x50>
    1f60:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    1f62:	60 e0       	ldi	r22, 0x00	; 0
    1f64:	82 e1       	ldi	r24, 0x12	; 18
    1f66:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
    1f6a:	8f ec       	ldi	r24, 0xCF	; 207
    1f6c:	97 e0       	ldi	r25, 0x07	; 7
    1f6e:	01 97       	sbiw	r24, 0x01	; 1
    1f70:	f1 f7       	brne	.-4      	; 0x1f6e <WriteInstruction+0x5e>
    1f72:	00 c0       	rjmp	.+0      	; 0x1f74 <WriteInstruction+0x64>
    1f74:	00 00       	nop
	_delay_ms(1);
	
	/*****Low data ****/
	DIO_WritePin(D7,READ_BIT(ins,3));
    1f76:	c3 fb       	bst	r28, 3
    1f78:	66 27       	eor	r22, r22
    1f7a:	60 f9       	bld	r22, 0
    1f7c:	87 e1       	ldi	r24, 0x17	; 23
    1f7e:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(D6,READ_BIT(ins,2));
    1f82:	c2 fb       	bst	r28, 2
    1f84:	66 27       	eor	r22, r22
    1f86:	60 f9       	bld	r22, 0
    1f88:	86 e1       	ldi	r24, 0x16	; 22
    1f8a:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(D5,READ_BIT(ins,1));
    1f8e:	c1 fb       	bst	r28, 1
    1f90:	66 27       	eor	r22, r22
    1f92:	60 f9       	bld	r22, 0
    1f94:	85 e1       	ldi	r24, 0x15	; 21
    1f96:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(D4,READ_BIT(ins,0));
    1f9a:	6c 2f       	mov	r22, r28
    1f9c:	61 70       	andi	r22, 0x01	; 1
    1f9e:	84 e1       	ldi	r24, 0x14	; 20
    1fa0:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
	DIO_WritePin(EN,HIGH); // trigger
    1fa4:	61 e0       	ldi	r22, 0x01	; 1
    1fa6:	82 e1       	ldi	r24, 0x12	; 18
    1fa8:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
    1fac:	8f ec       	ldi	r24, 0xCF	; 207
    1fae:	97 e0       	ldi	r25, 0x07	; 7
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <WriteInstruction+0xa0>
    1fb4:	00 c0       	rjmp	.+0      	; 0x1fb6 <WriteInstruction+0xa6>
    1fb6:	00 00       	nop
	_delay_ms(1);
	DIO_WritePin(EN,LOW);
    1fb8:	60 e0       	ldi	r22, 0x00	; 0
    1fba:	82 e1       	ldi	r24, 0x12	; 18
    1fbc:	0e 94 52 00 	call	0xa4	; 0xa4 <DIO_WritePin>
    1fc0:	8f ec       	ldi	r24, 0xCF	; 207
    1fc2:	97 e0       	ldi	r25, 0x07	; 7
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <WriteInstruction+0xb4>
    1fc8:	00 c0       	rjmp	.+0      	; 0x1fca <WriteInstruction+0xba>
    1fca:	00 00       	nop
	_delay_ms(1);
}
    1fcc:	cf 91       	pop	r28
    1fce:	08 95       	ret

00001fd0 <LCD_Init>:
    1fd0:	2f e7       	ldi	r18, 0x7F	; 127
    1fd2:	88 e3       	ldi	r24, 0x38	; 56
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	21 50       	subi	r18, 0x01	; 1
    1fd8:	80 40       	sbci	r24, 0x00	; 0
    1fda:	90 40       	sbci	r25, 0x00	; 0
    1fdc:	e1 f7       	brne	.-8      	; 0x1fd6 <LCD_Init+0x6>
    1fde:	00 c0       	rjmp	.+0      	; 0x1fe0 <LCD_Init+0x10>
    1fe0:	00 00       	nop
	_delay_ms(1);
}
void LCD_Init(void)
{
	_delay_ms(50);
	WriteInstruction(0x02);
    1fe2:	82 e0       	ldi	r24, 0x02	; 2
    1fe4:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <WriteInstruction>
	WriteInstruction(0x28); //  2 line    4 bit mode
    1fe8:	88 e2       	ldi	r24, 0x28	; 40
    1fea:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <WriteInstruction>
	WriteInstruction(0x0c); //  cursor     0x0c off ,0x0f on
    1fee:	8c e0       	ldi	r24, 0x0C	; 12
    1ff0:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <WriteInstruction>
	WriteInstruction(0x01); // clear screen
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <WriteInstruction>
    1ffa:	8f ec       	ldi	r24, 0xCF	; 207
    1ffc:	97 e0       	ldi	r25, 0x07	; 7
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <LCD_Init+0x2e>
    2002:	00 c0       	rjmp	.+0      	; 0x2004 <LCD_Init+0x34>
    2004:	00 00       	nop
	_delay_ms(1);
	WriteInstruction(0x06); // increase DDRAM address , no Shifting
    2006:	86 e0       	ldi	r24, 0x06	; 6
    2008:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <WriteInstruction>
    200c:	08 95       	ret

0000200e <lcd_time>:
void ClockTime_Func(void)
{
	
}
void CheckTime_Func(void)
{
    200e:	08 95       	ret

00002010 <main>:
{
	
	
}
int main ()
{
    2010:	0f 93       	push	r16
    2012:	1f 93       	push	r17
	LCD_Init();
    2014:	0e 94 e8 0f 	call	0x1fd0	; 0x1fd0 <LCD_Init>
	KEYPAD_Init();
    2018:	0e 94 77 0f 	call	0x1eee	; 0x1eee <KEYPAD_Init>
	
	//lcd_time=xTimerCreate("TIMER",1000,pdTRUE,0,fun1);
	xTimerStart(lcd_time,0);
    201c:	0e 94 57 09 	call	0x12ae	; 0x12ae <xTaskGetTickCount>
    2020:	00 e0       	ldi	r16, 0x00	; 0
    2022:	10 e0       	ldi	r17, 0x00	; 0
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	ac 01       	movw	r20, r24
    202a:	61 e0       	ldi	r22, 0x01	; 1
    202c:	87 e0       	ldi	r24, 0x07	; 7
    202e:	90 e1       	ldi	r25, 0x10	; 16
    2030:	0e 94 2f 0f 	call	0x1e5e	; 0x1e5e <xTimerGenericCommand>
	
	   
	
	vTaskStartScheduler();
    2034:	0e 94 21 09 	call	0x1242	; 0x1242 <vTaskStartScheduler>

	return 0;

}
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	08 95       	ret

00002042 <__udivmodhi4>:
    2042:	aa 1b       	sub	r26, r26
    2044:	bb 1b       	sub	r27, r27
    2046:	51 e1       	ldi	r21, 0x11	; 17
    2048:	07 c0       	rjmp	.+14     	; 0x2058 <__udivmodhi4_ep>

0000204a <__udivmodhi4_loop>:
    204a:	aa 1f       	adc	r26, r26
    204c:	bb 1f       	adc	r27, r27
    204e:	a6 17       	cp	r26, r22
    2050:	b7 07       	cpc	r27, r23
    2052:	10 f0       	brcs	.+4      	; 0x2058 <__udivmodhi4_ep>
    2054:	a6 1b       	sub	r26, r22
    2056:	b7 0b       	sbc	r27, r23

00002058 <__udivmodhi4_ep>:
    2058:	88 1f       	adc	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	5a 95       	dec	r21
    205e:	a9 f7       	brne	.-22     	; 0x204a <__udivmodhi4_loop>
    2060:	80 95       	com	r24
    2062:	90 95       	com	r25
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	08 95       	ret

0000206a <__tablejump2__>:
    206a:	ee 0f       	add	r30, r30
    206c:	ff 1f       	adc	r31, r31
    206e:	05 90       	lpm	r0, Z+
    2070:	f4 91       	lpm	r31, Z
    2072:	e0 2d       	mov	r30, r0
    2074:	09 94       	ijmp

00002076 <memcpy>:
    2076:	fb 01       	movw	r30, r22
    2078:	dc 01       	movw	r26, r24
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <memcpy+0xa>
    207c:	01 90       	ld	r0, Z+
    207e:	0d 92       	st	X+, r0
    2080:	41 50       	subi	r20, 0x01	; 1
    2082:	50 40       	sbci	r21, 0x00	; 0
    2084:	d8 f7       	brcc	.-10     	; 0x207c <memcpy+0x6>
    2086:	08 95       	ret

00002088 <memset>:
    2088:	dc 01       	movw	r26, r24
    208a:	01 c0       	rjmp	.+2      	; 0x208e <memset+0x6>
    208c:	6d 93       	st	X+, r22
    208e:	41 50       	subi	r20, 0x01	; 1
    2090:	50 40       	sbci	r21, 0x00	; 0
    2092:	e0 f7       	brcc	.-8      	; 0x208c <memset+0x4>
    2094:	08 95       	ret

00002096 <_exit>:
    2096:	f8 94       	cli

00002098 <__stop_program>:
    2098:	ff cf       	rjmp	.-2      	; 0x2098 <__stop_program>
